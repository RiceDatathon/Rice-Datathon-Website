{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeLocalePath = normalizeLocalePath;\n\nfunction normalizeLocalePath(pathname, locales) {\n  var detectedLocale; // first item will be empty string from splitting at first char\n\n  var pathnameParts = pathname.split('/');\n  (locales || []).some(function (locale) {\n    if (pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n      detectedLocale = locale;\n      pathnameParts.splice(1, 1);\n      pathname = pathnameParts.join('/') || '/';\n      return true;\n    }\n\n    return false;\n  });\n  return {\n    pathname: pathname,\n    detectedLocale: detectedLocale\n  };\n}","map":{"version":3,"sources":["../../../../shared/lib/i18n/normalize-locale-path.ts"],"names":[],"mappings":";;;;;QAcgB,mB,GAAA,mB;;SAAA,mB,CACd,Q,EACA,O,EACY;AACZ,MAAI,cAAJ,CADY,CAEZ;;AACA,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAT,CAAc,GAAd,CAAtB;GAEE,OAAO,IAAA,E,EAAQ,I,CAAI,UAAE,MAAF,EAAa;AAChC,QAAI,aAAa,CAAC,CAAD,CAAb,CAAiB,WAAjB,OAAmC,MAAM,CAAC,WAAP,EAAvC,EAA6D;AAC3D,MAAA,cAAc,GAAG,MAAjB;AACA,MAAA,aAAa,CAAC,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACA,MAAA,QAAQ,GAAG,aAAa,CAAC,IAAd,CAAkB,GAAlB,KAAsB,GAAjC;aACO,I;AACR;;WACM,K;AACR,G;;AAGC,IAAA,QAAQ,EAAR,Q;AACA,IAAA,cAAc,EAAd;;AAEH","sourcesContent":["export interface PathLocale {\n  detectedLocale?: string\n  pathname: string\n}\n\n/**\n * For a pathname that may include a locale from a list of locales, it\n * removes the locale from the pathname returning it alongside with the\n * detected locale.\n *\n * @param pathname A pathname that may include a locale.\n * @param locales A list of locales.\n * @returns The detected locale and pathname without locale\n */\nexport function normalizeLocalePath(\n  pathname: string,\n  locales?: string[]\n): PathLocale {\n  let detectedLocale: string | undefined\n  // first item will be empty string from splitting at first char\n  const pathnameParts = pathname.split('/')\n\n  ;(locales || []).some((locale) => {\n    if (pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n      detectedLocale = locale\n      pathnameParts.splice(1, 1)\n      pathname = pathnameParts.join('/') || '/'\n      return true\n    }\n    return false\n  })\n\n  return {\n    pathname,\n    detectedLocale,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}