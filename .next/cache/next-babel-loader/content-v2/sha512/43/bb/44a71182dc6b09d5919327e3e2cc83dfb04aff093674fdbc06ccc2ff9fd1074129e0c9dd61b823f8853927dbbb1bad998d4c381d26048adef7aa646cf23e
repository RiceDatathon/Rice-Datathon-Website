{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _webVitals = require(\"next/dist/compiled/web-vitals\");\n\nvar initialHref = location.href;\nvar isRegistered = false;\nvar userReportHandler;\n\nfunction onReport(metric) {\n  if (userReportHandler) {\n    userReportHandler(metric);\n  } // This code is not shipped, executed, or present in the client-side\n  // JavaScript bundle unless explicitly enabled in your application.\n  //\n  // When this feature is enabled, we'll make it very clear by printing a\n  // message during the build (`next build`).\n\n\n  if (false && // This field is empty unless you explicitly configure it:\n  process.env.__NEXT_ANALYTICS_ID) {\n    var fallbackSend = function fallbackSend() {\n      fetch(vitalsUrl, {\n        body: blob,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true\n      })[\"catch\"](console.error);\n    };\n\n    var body = {\n      dsn: process.env.__NEXT_ANALYTICS_ID,\n      id: metric.id,\n      page: window.__NEXT_DATA__.page,\n      href: initialHref,\n      event_name: metric.name,\n      value: metric.value.toString(),\n      speed: 'connection' in navigator && navigator['connection'] && 'effectiveType' in navigator['connection'] ? navigator['connection']['effectiveType'] : ''\n    };\n    var blob = new Blob([new URLSearchParams(body).toString()], {\n      // This content type is necessary for `sendBeacon`:\n      type: 'application/x-www-form-urlencoded'\n    });\n    var vitalsUrl = 'https://vitals.vercel-insights.com/v1/vitals'; // Navigator has to be bound to ensure it does not error in some browsers\n    // https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n\n    var send = navigator.sendBeacon && navigator.sendBeacon.bind(navigator);\n\n    try {\n      // If send is undefined it'll throw as well. This reduces output code size.\n      send(vitalsUrl, blob) || fallbackSend();\n    } catch (err) {\n      fallbackSend();\n    }\n  }\n}\n\nvar _default = function _default(onPerfEntry) {\n  // Update function if it changes:\n  userReportHandler = onPerfEntry; // Only register listeners once:\n\n  if (isRegistered) {\n    return;\n  }\n\n  isRegistered = true;\n  (0, _webVitals).getCLS(onReport);\n  (0, _webVitals).getFID(onReport);\n  (0, _webVitals).getFCP(onReport);\n  (0, _webVitals).getLCP(onReport);\n  (0, _webVitals).getTTFB(onReport);\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../client/performance-relayer.ts"],"names":[],"mappings":";;;;;;;AAQO,IAAA,UAA+B,GAAA,OAAA,CAAA,+BAAA,CAA/B;;AAEP,IAAM,WAAW,GAAG,QAAQ,CAAC,IAA7B;AACA,IAAI,YAAY,GAAG,KAAnB;AACA,IAAI,iBAAJ;;SAES,Q,CAAS,M,EAAsB;AACtC,MAAI,iBAAJ,EAAuB;AACrB,IAAA,iBAAiB,CAAC,MAAD,CAAjB;AACD,GAHqC,CAKtC;AACA;AACA;AACA;AACA;;;AACA,MACE,SACA;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,mBAHd,EAIE;AAAA,QAyBS,YAzBT,G,SAyBS,Y,GAAe;AACtB,MAAA,KAAK,CAAC,SAAD,EAAU;AACb,QAAA,IAAI,EAAE,IADO;AAEb,QAAA,MAAM,EAAA,MAFO;AAGb,QAAA,WAAW,EAAA,MAHE;AAIb,QAAA,SAAS,EAAE;AAJE,OAAV,CAAL,UAMS,OAAO,CAAC,KANjB;AAOD,KAjCD;;AACA,QAAM,IAAI,GAAA;AACR,MAAA,GAAG,EAAE,OAAO,CAAC,GAAR,CAAY,mBADT;AAER,MAAA,EAAE,EAAE,MAAM,CAAC,EAFH;AAGR,MAAA,IAAI,EAAE,MAAM,CAAC,aAAP,CAAqB,IAHnB;AAIR,MAAA,IAAI,EAAE,WAJE;AAKR,MAAA,UAAU,EAAE,MAAM,CAAC,IALX;AAMR,MAAA,KAAK,EAAE,MAAM,CAAC,KAAP,CAAa,QAAb,EANC;AAOR,MAAA,KAAK,EAAA,gBACa,SADb,IAEF,SAAS,CAAA,YAAA,CAFP,IAE4B,mBACX,SAAS,CAAA,YAAA,CAH1B,GAIG,SAAS,CAAA,YAAA,CAAT,CAA8B,eAA9B,CAJH,GAIkD;AAX/C,KAAV;AAeA,QAAM,IAAI,GAAG,IAAI,IAAJ,CAAQ,CAAE,IAAI,eAAJ,CAAoB,IAApB,EAA0B,QAA1B,EAAF,CAAR,E;AACX;AACA,MAAA,IAAI,EAAA;KAFO,CAAb;AAIA,QAAM,SAAS,GAAA,8CAAf,CApBA,CAqBA;AACA;;AACA,QAAM,IAAI,GAAG,SAAS,CAAC,UAAV,IAAwB,SAAS,CAAC,UAAV,CAAqB,IAArB,CAA0B,SAA1B,CAArC;;QAYI;AACF;AACA,MAAA,IAAI,CAAE,SAAF,EAAa,IAAb,CAAJ,IAA0B,YAAY,EAAtC;AACD,K,CAAA,OAAQ,GAAR,EAAa;AACZ,MAAA,YAAY;AACb;AACF;AACF;;iCAEe,W,EAAsC;AACpD;AACA,EAAA,iBAAiB,GAAG,WAApB,CAFoD,CAIpD;;AACA,MAAI,YAAJ,EAAkB;;AAEjB;;AACD,EAAA,YAAY,GAAG,IAAf;MAxEK,U,EAA+B,M,CA0E7B,Q;MA1EF,U,EAA+B,M,CA2E7B,Q;MA3EF,U,EAA+B,M,CA4E7B,Q;MA5EF,U,EAA+B,M,CA6E7B,Q;MA7EF,U,EAA+B,O,CA8E5B,Q;AACT,C","sourcesContent":["import {\n  getCLS,\n  getFCP,\n  getFID,\n  getLCP,\n  getTTFB,\n  Metric,\n  ReportHandler,\n} from 'next/dist/compiled/web-vitals'\n\nconst initialHref = location.href\nlet isRegistered = false\nlet userReportHandler: ReportHandler | undefined\n\nfunction onReport(metric: Metric): void {\n  if (userReportHandler) {\n    userReportHandler(metric)\n  }\n\n  // This code is not shipped, executed, or present in the client-side\n  // JavaScript bundle unless explicitly enabled in your application.\n  //\n  // When this feature is enabled, we'll make it very clear by printing a\n  // message during the build (`next build`).\n  if (\n    process.env.NODE_ENV === 'production' &&\n    // This field is empty unless you explicitly configure it:\n    process.env.__NEXT_ANALYTICS_ID\n  ) {\n    const body: Record<string, string> = {\n      dsn: process.env.__NEXT_ANALYTICS_ID,\n      id: metric.id,\n      page: window.__NEXT_DATA__.page,\n      href: initialHref,\n      event_name: metric.name,\n      value: metric.value.toString(),\n      speed:\n        'connection' in navigator &&\n        (navigator as any)['connection'] &&\n        'effectiveType' in (navigator as any)['connection']\n          ? ((navigator as any)['connection']['effectiveType'] as string)\n          : '',\n    }\n\n    const blob = new Blob([new URLSearchParams(body).toString()], {\n      // This content type is necessary for `sendBeacon`:\n      type: 'application/x-www-form-urlencoded',\n    })\n    const vitalsUrl = 'https://vitals.vercel-insights.com/v1/vitals'\n    // Navigator has to be bound to ensure it does not error in some browsers\n    // https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n    const send = navigator.sendBeacon && navigator.sendBeacon.bind(navigator)\n\n    function fallbackSend() {\n      fetch(vitalsUrl, {\n        body: blob,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true,\n        // console.error is used here as when the fetch fails it does not affect functioning of the app\n      }).catch(console.error)\n    }\n\n    try {\n      // If send is undefined it'll throw as well. This reduces output code size.\n      send!(vitalsUrl, blob) || fallbackSend()\n    } catch (err) {\n      fallbackSend()\n    }\n  }\n}\n\nexport default (onPerfEntry?: ReportHandler): void => {\n  // Update function if it changes:\n  userReportHandler = onPerfEntry\n\n  // Only register listeners once:\n  if (isRegistered) {\n    return\n  }\n  isRegistered = true\n\n  getCLS(onReport)\n  getFID(onReport)\n  getFCP(onReport)\n  getLCP(onReport)\n  getTTFB(onReport)\n}\n"]},"metadata":{},"sourceType":"script"}