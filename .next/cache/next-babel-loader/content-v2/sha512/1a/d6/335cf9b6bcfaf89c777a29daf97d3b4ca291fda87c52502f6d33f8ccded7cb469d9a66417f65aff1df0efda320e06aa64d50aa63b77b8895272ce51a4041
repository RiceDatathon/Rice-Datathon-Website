{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.closePing = closePing;\nexports.setupPing = setupPing;\nexports.currentPage = void 0;\n\nvar _eventsource = require(\"./error-overlay/eventsource\");\n\nvar evtSource;\nvar currentPage;\nexports.currentPage = currentPage;\n\nfunction closePing() {\n  if (evtSource) evtSource.close();\n  evtSource = null;\n}\n\nfunction setupPing(assetPrefix, pathnameFn, retry) {\n  var pathname = pathnameFn(); // Make sure to only create new EventSource request if page has changed\n\n  if (pathname === currentPage && !retry) return;\n  exports.currentPage = currentPage = pathname; // close current EventSource connection\n\n  closePing();\n  evtSource = (0, _eventsource).getEventSourceWrapper({\n    path: \"\".concat(assetPrefix, \"/_next/webpack-hmr?page=\").concat(encodeURIComponent(currentPage)),\n    timeout: 5000\n  });\n  evtSource.addMessageListener(function (event) {\n    if (event.data.indexOf('{') === -1) return;\n\n    try {\n      var payload = JSON.parse(event.data); // don't attempt fetching the page if we're already showing\n      // the dev overlay as this can cause the error to be triggered\n      // repeatedly\n\n      if (payload.invalid && !self.__NEXT_DATA__.err) {\n        // Payload can be invalid even if the page does not exist.\n        // So, we need to make sure it exists before reloading.\n        fetch(location.href, {\n          credentials: 'same-origin'\n        }).then(function (pageRes) {\n          if (pageRes.status === 200) {\n            location.reload();\n          }\n        });\n      }\n    } catch (err) {\n      console.error('on-demand-entries failed to parse response', err);\n    }\n  });\n}","map":{"version":3,"sources":["../../../client/dev/on-demand-entries-utils.js"],"names":[],"mappings":";;;;;QAMgB,S,GAAA,S;QAKA,S,GAAA,S;;;AAVsB,IAAA,YAA6B,GAAA,OAAA,CAAA,6BAAA,CAA7B;;AAEtC,IAAI,SAAJ;AACO,IAAI,WAAJ;QAAI,W,GAAA,W;;SAEK,S,GAAY;AAC1B,MAAI,SAAJ,EAAe,SAAS,CAAC,KAAV;AACf,EAAA,SAAS,GAAG,IAAZ;AACD;;SAEe,S,CAAU,W,EAAa,U,EAAY,K,EAAO;AACxD,MAAM,QAAQ,GAAG,UAAU,EAA3B,CADwD,CAGxD;;AACA,MAAI,QAAQ,KAAK,WAAb,IAAwB,CAAK,KAAjC,EAAsC;wBACtC,WAAW,GAAG,Q,CAL0C,CAMxD;;AACA,EAAA,SAAS;AAET,EAAA,SAAS,GAAA,CAAA,GAnB2B,YAmB3B,EAnBwD,qBAmBxD,CAnBwD;AAoB/D,IAAA,IAAI,YAAK,WAAL,qCAA2C,kBAAkB,CAC/D,WAD+D,CAA7D,CApB2D;AAuB/D,IAAA,OAAO,EAAE;AAvBsD,GAmBxD,CAAT;AAOA,EAAA,SAAS,CAAC,kBAAV,CAA4B,UAAE,KAAF,EAAY;AACtC,QAAI,KAAK,CAAC,IAAN,CAAW,OAAX,CAAkB,GAAlB,MAAsB,CAAO,CAAjC,EAAkC;;QAC9B;AACF,UAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,CAAC,IAAjB,CAAhB,CADE,CAEF;AACA;AACA;;AACA,UAAI,OAAO,CAAC,OAAR,IAAe,CAAK,IAAI,CAAC,aAAL,CAAmB,GAA3C,EAAgD;AAC9C;AACA;AACA,QAAA,KAAK,CAAC,QAAQ,CAAC,IAAV,EAAc;AACjB,UAAA,WAAW,EAAA;AADM,SAAd,CAAL,CAEG,IAFH,CAEO,UAAE,OAAF,EAAc;AACnB,cAAI,OAAO,CAAC,MAAR,KAAmB,GAAvB,EAA4B;AAC1B,YAAA,QAAQ,CAAC,MAAT;AACD;AACF,SAND;AAOD;AACF,K,CAAA,OAAQ,GAAR,EAAa;AACZ,MAAA,OAAO,CAAC,KAAR,CAAa,4CAAb,EAA4D,GAA5D;AACD;AACF,GArBD;AAsBD","sourcesContent":["/* global location */\nimport { getEventSourceWrapper } from './error-overlay/eventsource'\n\nlet evtSource\nexport let currentPage\n\nexport function closePing() {\n  if (evtSource) evtSource.close()\n  evtSource = null\n}\n\nexport function setupPing(assetPrefix, pathnameFn, retry) {\n  const pathname = pathnameFn()\n\n  // Make sure to only create new EventSource request if page has changed\n  if (pathname === currentPage && !retry) return\n  currentPage = pathname\n  // close current EventSource connection\n  closePing()\n\n  evtSource = getEventSourceWrapper({\n    path: `${assetPrefix}/_next/webpack-hmr?page=${encodeURIComponent(\n      currentPage\n    )}`,\n    timeout: 5000,\n  })\n\n  evtSource.addMessageListener((event) => {\n    if (event.data.indexOf('{') === -1) return\n    try {\n      const payload = JSON.parse(event.data)\n      // don't attempt fetching the page if we're already showing\n      // the dev overlay as this can cause the error to be triggered\n      // repeatedly\n      if (payload.invalid && !self.__NEXT_DATA__.err) {\n        // Payload can be invalid even if the page does not exist.\n        // So, we need to make sure it exists before reloading.\n        fetch(location.href, {\n          credentials: 'same-origin',\n        }).then((pageRes) => {\n          if (pageRes.status === 200) {\n            location.reload()\n          }\n        })\n      }\n    } catch (err) {\n      console.error('on-demand-entries failed to parse response', err)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}