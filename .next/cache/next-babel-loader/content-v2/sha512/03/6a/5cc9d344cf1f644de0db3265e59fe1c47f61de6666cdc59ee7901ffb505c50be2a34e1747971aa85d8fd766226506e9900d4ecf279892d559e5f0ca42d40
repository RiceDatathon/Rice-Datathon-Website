{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports.default = void 0;\n\nvar _normalizeTrailingSlash = require(\"../../../client/normalize-trailing-slash\");\n\nvar _routeLoader = require(\"../../../client/route-loader\");\n\nvar _denormalizePagePath = require(\"../../../server/denormalize-page-path\");\n\nvar _normalizeLocalePath = require(\"../i18n/normalize-locale-path\");\n\nvar _mitt = _interopRequireDefault(require(\"../mitt\"));\n\nvar _utils = require(\"../utils\");\n\nvar _isDynamic = require(\"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"./utils/parse-relative-url\");\n\nvar _querystring = require(\"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(require(\"./utils/resolve-rewrites\"));\n\nvar _routeMatcher = require(\"./utils/route-matcher\");\n\nvar _routeRegex = require(\"./utils/route-regex\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nlet detectDomainLocale;\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  detectDomainLocale = require('../i18n/detect-domain-locale').detectDomainLocale;\n}\n\nconst basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash).normalizePathTrailingSlash(prefix) : `${prefix}${pathNoQueryHash(path) === '/' ? path.substring(1) : path}` : path;\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    locale = locale || (0, _normalizeLocalePath).normalizeLocalePath(path, locales).detectedLocale;\n    const detectedDomain = detectDomainLocale(domainLocales, undefined, locale);\n\n    if (detectedDomain) {\n      return `http${detectedDomain.http ? '' : 's'}://${detectedDomain.domain}${basePath || ''}${locale === detectedDomain.defaultLocale ? '' : `/${locale}`}${path}`;\n    }\n\n    return false;\n  } else {\n    return false;\n  }\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const pathname = pathNoQueryHash(path);\n    const pathLower = pathname.toLowerCase();\n    const localeLower = locale && locale.toLowerCase();\n    return locale && locale !== defaultLocale && !pathLower.startsWith('/' + localeLower + '/') && pathLower !== '/' + localeLower ? addPathPrefix(path, '/' + locale) : path;\n  }\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const pathname = pathNoQueryHash(path);\n    const pathLower = pathname.toLowerCase();\n    const localeLower = locale && locale.toLowerCase();\n    return locale && (pathLower.startsWith('/' + localeLower + '/') || pathLower === '/' + localeLower) ? (pathname.length === locale.length + 1 ? '/' : '') + path.substr(locale.length + 1) : path;\n  }\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  const queryIndex = path.indexOf('?');\n  const hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  path = pathNoQueryHash(path);\n  return path === basePath || path.startsWith(basePath + '/');\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = `/${path}`;\n  return path;\n}\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils).getLocationOrigin();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  let interpolatedRoute = '';\n  const dynamicRegex = (0, _routeRegex).getRouteRegex(route);\n  const dynamicGroups = dynamicRegex.groups;\n  const dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  const params = Object.keys(dynamicGroups);\n\n  if (!params.every(param => {\n    let value = dynamicMatches[param] || '';\n    const {\n      repeat,\n      optional\n    } = dynamicGroups[param]; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    let replaced = `[${repeat ? '...' : ''}${param}]`;\n\n    if (optional) {\n      replaced = `${!value ? '/' : ''}[${replaced}]`;\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    segment => encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = '' // did not satisfy all requirements\n    ; // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  const filteredQuery = {};\n  Object.keys(query).forEach(key => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n\nfunction resolveHref(router, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  let base;\n  let urlAsString = typeof href === 'string' ? href : (0, _utils).formatWithValidation(href); // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n\n  const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n  const urlAsStringNoProto = urlProtoMatch ? urlAsString.substr(urlProtoMatch[0].length) : urlAsString;\n  const urlParts = urlAsStringNoProto.split('?');\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(`Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`);\n    const normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;\n  } // Return because it cannot be routed by the Next.js router\n\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n');\n  }\n\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);\n    let interpolatedAs = '';\n\n    if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      const query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);\n      const {\n        result,\n        params\n      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n\n      if (result) {\n        interpolatedAs = (0, _utils).formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  const origin = (0, _utils).getLocationOrigin();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router, url, true);\n  const origin = (0, _utils).getLocationOrigin();\n  const hrefHadOrigin = resolvedHref.startsWith(origin);\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  const preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  const cleanPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n}\n\nconst manualScrollRestoration = process.env.__NEXT_SCROLL_RESTORATION && false && 'scrollRestoration' in window.history && !!function () {\n  try {\n    let v = '__next'; // eslint-disable-next-line no-sequences\n\n    return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true;\n  } catch (n) {}\n}();\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(data => {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(`Failed to load static props`);\n        });\n      }\n\n      throw new Error(`Failed to load static props`);\n    }\n\n    return res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader).markAssetError(err);\n    }\n\n    throw err;\n  });\n}\n\nclass Router {\n  constructor(pathname1, query1, as1, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component: Component1,\n    err: err1,\n    subscription,\n    isFallback,\n    locale,\n    locales,\n    defaultLocale,\n    domainLocales,\n    isPreview\n  }) {\n    // Static Data Cache\n    this.sdc = {}; // In-flight Server Data Requests, for deduping\n\n    this.sdr = {};\n    this._idx = 0;\n\n    this.onPopState = e => {\n      const state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname: pathname1,\n          query: query1\n        } = this;\n        this.changeState('replaceState', (0, _utils).formatWithValidation({\n          pathname: addBasePath(pathname1),\n          query: query1\n        }), (0, _utils).getURL());\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      let forcedScroll;\n      const {\n        url,\n        as: as1,\n        options,\n        idx\n      } = state;\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          if (this._idx !== idx) {\n            // Snapshot current scroll position:\n            try {\n              sessionStorage.setItem('__next_scroll_' + this._idx, JSON.stringify({\n                x: self.pageXOffset,\n                y: self.pageYOffset\n              }));\n            } catch {} // Restore old scroll position:\n\n\n            try {\n              const v = sessionStorage.getItem('__next_scroll_' + idx);\n              forcedScroll = JSON.parse(v);\n            } catch {\n              forcedScroll = {\n                x: 0,\n                y: 0\n              };\n            }\n          }\n        }\n      }\n\n      this._idx = idx;\n      const {\n        pathname: pathname1\n      } = (0, _parseRelativeUrl).parseRelativeUrl(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as1 === this.asPath && pathname1 === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change('replaceState', url, as1, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    this.route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname1 !== '/_error') {\n      this.components[this.route] = {\n        Component: Component1,\n        initial: true,\n        props: initialProps,\n        err: err1,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: []\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname1;\n    this.query = query1; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    const autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname1) && self.__NEXT_DATA__.autoExport;\n\n    this.asPath = autoExportDynamic ? pathname1 : as1;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !process.env.__NEXT_HAS_REWRITES);\n    this.isPreview = !!isPreview;\n    this.isLocaleDomain = false;\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale;\n      this.locales = locales;\n      this.defaultLocale = defaultLocale;\n      this.domainLocales = domainLocales;\n      this.isLocaleDomain = !!detectDomainLocale(domainLocales, self.location.hostname);\n    }\n\n    if (false) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as1.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        const options = {\n          locale\n        };\n        options._shouldResolveHref = as1 !== pathname1;\n        this.changeState('replaceState', (0, _utils).formatWithValidation({\n          pathname: addBasePath(pathname1),\n          query: query1\n        }), (0, _utils).getURL(), options);\n      }\n\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual';\n        }\n      }\n    }\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as, options = {}) {\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      // TODO: remove in the future when we update history before route change\n      // is complete, as the popstate event should handle this capture.\n      if (manualScrollRestoration) {\n        try {\n          // Snapshot scroll position right before navigating to a new page:\n          sessionStorage.setItem('__next_scroll_' + this._idx, JSON.stringify({\n            x: self.pageXOffset,\n            y: self.pageYOffset\n          }));\n        } catch {}\n      }\n    }\n\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as, options = {}) {\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n\n  async change(method, url, as, options, forcedScroll) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n\n    const shouldResolveHref = url === as || options._h || options._shouldResolveHref; // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n\n    if (options._h) {\n      this.isReady = true;\n    }\n\n    const prevLocale = this.locale;\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = options.locale === false ? this.defaultLocale : options.locale || this.locale;\n\n      if (typeof options.locale === 'undefined') {\n        options.locale = this.locale;\n      }\n\n      const parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(hasBasePath(as) ? delBasePath(as) : as);\n      const localePathResult = (0, _normalizeLocalePath).normalizeLocalePath(parsedAs.pathname, this.locales);\n\n      if (localePathResult.detectedLocale) {\n        this.locale = localePathResult.detectedLocale;\n        parsedAs.pathname = addBasePath(parsedAs.pathname);\n        as = (0, _utils).formatWithValidation(parsedAs);\n        url = addBasePath((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(url) ? delBasePath(url) : url, this.locales).pathname);\n      }\n\n      let didNavigate = false; // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        var ref; // if the locale isn't configured hard navigate to show 404 page\n\n        if (!((ref = this.locales) === null || ref === void 0 ? void 0 : ref.includes(this.locale))) {\n          parsedAs.pathname = addLocale(parsedAs.pathname, this.locale);\n          window.location.href = (0, _utils).formatWithValidation(parsedAs); // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n\n          didNavigate = true;\n        }\n      }\n\n      const detectedDomain = detectDomainLocale(this.domainLocales, undefined, this.locale); // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if we are navigating to a domain locale ensure we redirect to the\n        // correct domain\n        if (!didNavigate && detectedDomain && this.isLocaleDomain && self.location.hostname !== detectedDomain.domain) {\n          const asNoBasePath = delBasePath(as);\n          window.location.href = `http${detectedDomain.http ? '' : 's'}://${detectedDomain.domain}${addBasePath(`${this.locale === detectedDomain.defaultLocale ? '' : `/${this.locale}`}${asNoBasePath === '/' ? '' : asNoBasePath}` || '/')}`; // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n\n          didNavigate = true;\n        }\n      }\n\n      if (didNavigate) {\n        return new Promise(() => {});\n      }\n    }\n\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n\n\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n\n    const {\n      shallow = false\n    } = options;\n    const routeProps = {\n      shallow\n    };\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps);\n    }\n\n    as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));\n    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);\n    this._inFlightRoute = as;\n    let localeChange = prevLocale !== this.locale; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n\n    if (!options._h && this.onlyAHashChange(cleanedAs) && !localeChange) {\n      this.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n      this.changeState(method, url, as, options);\n      this.scrollToHash(cleanedAs);\n      this.notify(this.components[this.route], null);\n      Router.events.emit('hashChangeComplete', as, routeProps);\n      return true;\n    }\n\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname: pathname1,\n      query: query1\n    } = parsed; // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n\n    let pages, rewrites;\n\n    try {\n      pages = await this.pageLoader.getPageList();\n      ({\n        __rewrites: rewrites\n      } = await (0, _routeLoader).getClientBuildManifest());\n    } catch (err1) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as;\n      return false;\n    } // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n\n\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState';\n    } // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n\n\n    let resolvedAs = as; // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n\n    pathname1 = pathname1 ? (0, _normalizeTrailingSlash).removePathTrailingSlash(delBasePath(pathname1)) : pathname1;\n\n    if (shouldResolveHref && pathname1 !== '/_error') {\n      options._shouldResolveHref = true;\n\n      if (process.env.__NEXT_HAS_REWRITES && as.startsWith('/')) {\n        const rewritesResult = (0, _resolveRewrites).default(addBasePath(addLocale(cleanedAs, this.locale)), pages, rewrites, query1, p => resolveDynamicRoute(p, pages), this.locales);\n        resolvedAs = rewritesResult.asPath;\n\n        if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n          // if this directly matches a page we need to update the href to\n          // allow the correct page chunk to be loaded\n          pathname1 = rewritesResult.resolvedHref;\n          parsed.pathname = addBasePath(pathname1);\n          url = (0, _utils).formatWithValidation(parsed);\n        }\n      } else {\n        parsed.pathname = resolveDynamicRoute(pathname1, pages);\n\n        if (parsed.pathname !== pathname1) {\n          pathname1 = parsed.pathname;\n          parsed.pathname = addBasePath(pathname1);\n          url = (0, _utils).formatWithValidation(parsed);\n        }\n      }\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1);\n\n    if (!isLocalURL(as)) {\n      if (true) {\n        throw new Error(`Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` + `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);\n      }\n\n      window.location.href = as;\n      return false;\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);\n\n    if ((0, _isDynamic).isDynamicRoute(route)) {\n      const parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n      const asPathname = parsedAs.pathname;\n      const routeRegex = (0, _routeRegex).getRouteRegex(route);\n      const routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n      const shouldInterpolate = route === asPathname;\n      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query1) : {};\n\n      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query1[param]);\n\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n\n          throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://nextjs.org/docs/messages/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);\n        }\n      } else if (shouldInterpolate) {\n        as = (0, _utils).formatWithValidation(Object.assign({}, parsedAs, {\n          pathname: interpolatedAs.result,\n          query: omitParmsFromQuery(query1, interpolatedAs.params)\n        }));\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query1, routeMatch);\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps);\n\n    try {\n      var ref, ref1;\n      let routeInfo = await this.getRouteInfo(route, pathname1, query1, as, resolvedAs, routeProps);\n      let {\n        error,\n        props,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo; // handle redirect on client-transition\n\n      if ((__N_SSG || __N_SSP) && props) {\n        if (props.pageProps && props.pageProps.__N_REDIRECT) {\n          const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n\n          if (destination.startsWith('/')) {\n            const parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n            parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n            const {\n              url: newUrl,\n              as: newAs\n            } = prepareUrlAs(this, destination, destination);\n            return this.change(method, newUrl, newAs, options);\n          }\n\n          window.location.href = destination;\n          return new Promise(() => {});\n        }\n\n        this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute;\n\n          try {\n            await this.fetchComponent('/404');\n            notFoundRoute = '/404';\n          } catch (_) {\n            notFoundRoute = '/_error';\n          }\n\n          routeInfo = await this.getRouteInfo(notFoundRoute, notFoundRoute, query1, as, resolvedAs, {\n            shallow: false\n          });\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps);\n      this.changeState(method, url, as, options);\n\n      if (true) {\n        const appComp = this.components['/_app'].Component;\n        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n      }\n\n      if (options._h && pathname1 === '/_error' && ((ref = self.__NEXT_DATA__.props) === null || ref === void 0 ? void 0 : (ref1 = ref.pageProps) === null || ref1 === void 0 ? void 0 : ref1.statusCode) === 500 && (props === null || props === void 0 ? void 0 : props.pageProps)) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500;\n      } // shallow routing is only allowed for same page URL changes.\n\n\n      const isValidShallowRoute = options.shallow && this.route === route;\n\n      var _scroll;\n\n      const shouldScroll = (_scroll = options.scroll) !== null && _scroll !== void 0 ? _scroll : !isValidShallowRoute;\n      const resetScroll = shouldScroll ? {\n        x: 0,\n        y: 0\n      } : null;\n      await this.set(route, pathname1, query1, cleanedAs, routeInfo, forcedScroll !== null && forcedScroll !== void 0 ? forcedScroll : resetScroll).catch(e => {\n        if (e.cancelled) error = error || e;else throw e;\n      });\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n        throw error;\n      }\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        if (this.locale) {\n          document.documentElement.lang = this.locale;\n        }\n      }\n\n      Router.events.emit('routeChangeComplete', as, routeProps);\n      return true;\n    } catch (err1) {\n      if (err1.cancelled) {\n        return false;\n      }\n\n      throw err1;\n    }\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || (0, _utils).getURL() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n\n    if ((0, _routeLoader).isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n\n      throw buildCancellationError();\n    }\n\n    try {\n      let Component1;\n      let styleSheets;\n      let props;\n\n      if (typeof Component1 === 'undefined' || typeof styleSheets === 'undefined') {\n        ({\n          page: Component1,\n          styleSheets\n        } = await this.fetchComponent('/_error'));\n      }\n\n      const routeInfo = {\n        props,\n        Component: Component1,\n        styleSheets,\n        err,\n        error: err\n      };\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component1, {\n            err,\n            pathname,\n            query\n          });\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr);\n          routeInfo.props = {};\n        }\n      }\n\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, routeProps, true);\n    }\n  }\n\n  async getRouteInfo(route, pathname, query, as, resolvedAs, routeProps) {\n    try {\n      const existingRouteInfo = this.components[route];\n\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo;\n      }\n\n      const cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;\n      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      }));\n      const {\n        Component: Component1,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo;\n\n      if (true) {\n        const {\n          isValidElementType\n        } = require('react-is');\n\n        if (!isValidElementType(Component1)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      let dataHref;\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref((0, _utils).formatWithValidation({\n          pathname,\n          query\n        }), resolvedAs, __N_SSG, this.locale);\n      }\n\n      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component1, // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as,\n        locale: this.locale,\n        locales: this.locales,\n        defaultLocale: this.defaultLocale\n      }));\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err2) {\n      return this.handleRouteInfoError(err2, pathname, query, as, routeProps);\n    }\n  }\n\n  set(route, pathname, query, as, data, resetScroll) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  async prefetch(url, asPath = url, options = {}) {\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname: pathname2\n    } = parsed;\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      if (options.locale === false) {\n        pathname2 = (0, _normalizeLocalePath).normalizeLocalePath(pathname2, this.locales).pathname;\n        parsed.pathname = pathname2;\n        url = (0, _utils).formatWithValidation(parsed);\n        let parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(asPath);\n        const localePathResult = (0, _normalizeLocalePath).normalizeLocalePath(parsedAs.pathname, this.locales);\n        parsedAs.pathname = localePathResult.pathname;\n        options.locale = localePathResult.detectedLocale || this.defaultLocale;\n        asPath = (0, _utils).formatWithValidation(parsedAs);\n      }\n    }\n\n    const pages = await this.pageLoader.getPageList();\n    let resolvedAs = asPath;\n\n    if (process.env.__NEXT_HAS_REWRITES && asPath.startsWith('/')) {\n      let rewrites;\n      ({\n        __rewrites: rewrites\n      } = await (0, _routeLoader).getClientBuildManifest());\n      const rewritesResult = (0, _resolveRewrites).default(addBasePath(addLocale(asPath, this.locale)), pages, rewrites, parsed.query, p => resolveDynamicRoute(p, pages), this.locales);\n      resolvedAs = delLocale(delBasePath(rewritesResult.asPath), this.locale);\n\n      if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n        // if this directly matches a page we need to update the href to\n        // allow the correct page chunk to be loaded\n        pathname2 = rewritesResult.resolvedHref;\n        parsed.pathname = pathname2;\n        url = (0, _utils).formatWithValidation(parsed);\n      }\n    } else {\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n      if (parsed.pathname !== pathname2) {\n        pathname2 = parsed.pathname;\n        parsed.pathname = pathname2;\n        url = (0, _utils).formatWithValidation(parsed);\n      }\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname2); // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n    if (true) {\n      return;\n    }\n\n    await Promise.all([this.pageLoader._isSsg(route).then(isSsg => {\n      return isSsg ? this._getStaticData(this.pageLoader.getDataHref(url, resolvedAs, true, typeof options.locale !== 'undefined' ? options.locale : this.locale)) : false;\n    }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    const componentResult = await this.pageLoader.loadPage(route);\n\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n\n    return componentResult;\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err2 = new Error('Loading initial props cancelled');\n        err2.cancelled = true;\n        throw err2;\n      }\n\n      return data;\n    });\n  }\n\n  _getStaticData(dataHref) {\n    const {\n      href: cacheKey\n    } = new URL(dataHref, window.location.href);\n\n    if (false && !this.isPreview && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey]);\n    }\n\n    return fetchNextData(dataHref, this.isSsr).then(data => {\n      this.sdc[cacheKey] = data;\n      return data;\n    });\n  }\n\n  _getServerData(dataHref) {\n    const {\n      href: resourceKey\n    } = new URL(dataHref, window.location.href);\n\n    if (this.sdr[resourceKey]) {\n      return this.sdr[resourceKey];\n    }\n\n    return this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr).then(data => {\n      delete this.sdr[resourceKey];\n      return data;\n    }).catch(err2 => {\n      delete this.sdr[resourceKey];\n      throw err2;\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App1\n    } = this.components['/_app'];\n\n    const AppTree = this._wrapApp(App1);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils).loadGetInitialProps(App1, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  abortComponentLoad(as, routeProps) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data, resetScroll) {\n    return this.sub(data, this.components['/_app'].Component, resetScroll);\n  }\n\n}\n\nRouter.events = (0, _mitt).default();\nexports.default = Router;","map":{"version":3,"sources":["../../../../shared/lib/router/router.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:no-console\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { UrlObject } from 'url'\nimport {\n  normalizePathTrailingSlash,\n  removePathTrailingSlash,\n} from '../../../client/normalize-trailing-slash'\nimport { GoodPageCache, StyleSheetTuple } from '../../../client/page-loader'\nimport {\n  getClientBuildManifest,\n  isAssetError,\n  markAssetError,\n} from '../../../client/route-loader'\nimport { RouterEvent } from '../../../client/router'\nimport type { DomainLocale } from '../../../server/config'\nimport { denormalizePagePath } from '../../../server/denormalize-page-path'\nimport { normalizeLocalePath } from '../i18n/normalize-locale-path'\nimport mitt, { MittEmitter } from '../mitt'\nimport {\n  AppContextType,\n  formatWithValidation,\n  getLocationOrigin,\n  getURL,\n  loadGetInitialProps,\n  normalizeRepeatedSlashes,\n  NextPageContext,\n  ST,\n  NEXT_DATA,\n} from '../utils'\nimport { isDynamicRoute } from './utils/is-dynamic'\nimport { parseRelativeUrl } from './utils/parse-relative-url'\nimport { searchParamsToUrlQuery } from './utils/querystring'\nimport resolveRewrites from './utils/resolve-rewrites'\nimport { getRouteMatcher } from './utils/route-matcher'\nimport { getRouteRegex } from './utils/route-regex'\n\ndeclare global {\n  interface Window {\n    /* prod */\n    __NEXT_DATA__: NEXT_DATA\n  }\n}\n\ninterface RouteProperties {\n  shallow: boolean\n}\n\ninterface TransitionOptions {\n  shallow?: boolean\n  locale?: string | false\n  scroll?: boolean\n}\n\ninterface NextHistoryState {\n  url: string\n  as: string\n  options: TransitionOptions\n}\n\ntype HistoryState =\n  | null\n  | { __N: false }\n  | ({ __N: true; idx: number } & NextHistoryState)\n\nlet detectDomainLocale: typeof import('../i18n/detect-domain-locale').detectDomainLocale\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  detectDomainLocale =\n    require('../i18n/detect-domain-locale').detectDomainLocale\n}\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true,\n  })\n}\n\nfunction addPathPrefix(path: string, prefix?: string) {\n  return prefix && path.startsWith('/')\n    ? path === '/'\n      ? normalizePathTrailingSlash(prefix)\n      : `${prefix}${pathNoQueryHash(path) === '/' ? path.substring(1) : path}`\n    : path\n}\n\nexport function getDomainLocale(\n  path: string,\n  locale?: string | false,\n  locales?: string[],\n  domainLocales?: DomainLocale[]\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    locale = locale || normalizeLocalePath(path, locales).detectedLocale\n\n    const detectedDomain = detectDomainLocale(domainLocales, undefined, locale)\n\n    if (detectedDomain) {\n      return `http${detectedDomain.http ? '' : 's'}://${detectedDomain.domain}${\n        basePath || ''\n      }${locale === detectedDomain.defaultLocale ? '' : `/${locale}`}${path}`\n    }\n    return false\n  } else {\n    return false\n  }\n}\n\nexport function addLocale(\n  path: string,\n  locale?: string | false,\n  defaultLocale?: string\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const pathname = pathNoQueryHash(path)\n    const pathLower = pathname.toLowerCase()\n    const localeLower = locale && locale.toLowerCase()\n\n    return locale &&\n      locale !== defaultLocale &&\n      !pathLower.startsWith('/' + localeLower + '/') &&\n      pathLower !== '/' + localeLower\n      ? addPathPrefix(path, '/' + locale)\n      : path\n  }\n  return path\n}\n\nexport function delLocale(path: string, locale?: string) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const pathname = pathNoQueryHash(path)\n    const pathLower = pathname.toLowerCase()\n    const localeLower = locale && locale.toLowerCase()\n\n    return locale &&\n      (pathLower.startsWith('/' + localeLower + '/') ||\n        pathLower === '/' + localeLower)\n      ? (pathname.length === locale.length + 1 ? '/' : '') +\n          path.substr(locale.length + 1)\n      : path\n  }\n  return path\n}\n\nfunction pathNoQueryHash(path: string) {\n  const queryIndex = path.indexOf('?')\n  const hashIndex = path.indexOf('#')\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex)\n  }\n  return path\n}\n\nexport function hasBasePath(path: string): boolean {\n  path = pathNoQueryHash(path)\n  return path === basePath || path.startsWith(basePath + '/')\n}\n\nexport function addBasePath(path: string): string {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath)\n}\n\nexport function delBasePath(path: string): string {\n  path = path.slice(basePath.length)\n  if (!path.startsWith('/')) path = `/${path}`\n  return path\n}\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?'))\n    return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n\ntype Url = UrlObject | string\n\nexport function interpolateAs(\n  route: string,\n  asPathname: string,\n  query: ParsedUrlQuery\n) {\n  let interpolatedRoute = ''\n\n  const dynamicRegex = getRouteRegex(route)\n  const dynamicGroups = dynamicRegex.groups\n  const dynamicMatches =\n    // Try to match the dynamic route against the asPath\n    (asPathname !== route ? getRouteMatcher(dynamicRegex)(asPathname) : '') ||\n    // Fall back to reading the values from the href\n    // TODO: should this take priority; also need to change in the router.\n    query\n\n  interpolatedRoute = route\n  const params = Object.keys(dynamicGroups)\n\n  if (\n    !params.every((param) => {\n      let value = dynamicMatches[param] || ''\n      const { repeat, optional } = dynamicGroups[param]\n\n      // support single-level catch-all\n      // TODO: more robust handling for user-error (passing `/`)\n      let replaced = `[${repeat ? '...' : ''}${param}]`\n      if (optional) {\n        replaced = `${!value ? '/' : ''}[${replaced}]`\n      }\n      if (repeat && !Array.isArray(value)) value = [value]\n\n      return (\n        (optional || param in dynamicMatches) &&\n        // Interpolate group into data URL if present\n        (interpolatedRoute =\n          interpolatedRoute!.replace(\n            replaced,\n            repeat\n              ? (value as string[])\n                  .map(\n                    // these values should be fully encoded instead of just\n                    // path delimiter escaped since they are being inserted\n                    // into the URL and we expect URL encoded segments\n                    // when parsing dynamic route params\n                    (segment) => encodeURIComponent(segment)\n                  )\n                  .join('/')\n              : encodeURIComponent(value as string)\n          ) || '/')\n      )\n    })\n  ) {\n    interpolatedRoute = '' // did not satisfy all requirements\n\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n  return {\n    params,\n    result: interpolatedRoute,\n  }\n}\n\nfunction omitParmsFromQuery(query: ParsedUrlQuery, params: string[]) {\n  const filteredQuery: ParsedUrlQuery = {}\n\n  Object.keys(query).forEach((key) => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key]\n    }\n  })\n  return filteredQuery\n}\n\n/**\n * Resolves a given hyperlink with a certain router state (basePath not included).\n * Preserves absolute urls.\n */\nexport function resolveHref(\n  router: NextRouter,\n  href: Url,\n  resolveAs?: boolean\n): string {\n  // we use a dummy base url for relative urls\n  let base: URL\n  let urlAsString = typeof href === 'string' ? href : formatWithValidation(href)\n\n  // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n  const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//)\n  const urlAsStringNoProto = urlProtoMatch\n    ? urlAsString.substr(urlProtoMatch[0].length)\n    : urlAsString\n\n  const urlParts = urlAsStringNoProto.split('?')\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(\n      `Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`\n    )\n    const normalizedUrl = normalizeRepeatedSlashes(urlAsStringNoProto)\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl\n  }\n\n  // Return because it cannot be routed by the Next.js router\n  if (!isLocalURL(urlAsString)) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n\n  try {\n    base = new URL(\n      urlAsString.startsWith('#') ? router.asPath : router.pathname,\n      'http://n'\n    )\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n')\n  }\n  try {\n    const finalUrl = new URL(urlAsString, base)\n    finalUrl.pathname = normalizePathTrailingSlash(finalUrl.pathname)\n    let interpolatedAs = ''\n\n    if (\n      isDynamicRoute(finalUrl.pathname) &&\n      finalUrl.searchParams &&\n      resolveAs\n    ) {\n      const query = searchParamsToUrlQuery(finalUrl.searchParams)\n\n      const { result, params } = interpolateAs(\n        finalUrl.pathname,\n        finalUrl.pathname,\n        query\n      )\n\n      if (result) {\n        interpolatedAs = formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params),\n        })\n      }\n    }\n\n    // if the origin didn't change, it means we received a relative href\n    const resolvedHref =\n      finalUrl.origin === base.origin\n        ? finalUrl.href.slice(finalUrl.origin.length)\n        : finalUrl.href\n\n    return (\n      resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref\n    ) as string\n  } catch (_) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n}\n\nfunction stripOrigin(url: string) {\n  const origin = getLocationOrigin()\n\n  return url.startsWith(origin) ? url.substring(origin.length) : url\n}\n\nfunction prepareUrlAs(router: NextRouter, url: Url, as?: Url) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router, url, true)\n  const origin = getLocationOrigin()\n  const hrefHadOrigin = resolvedHref.startsWith(origin)\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin)\n\n  resolvedHref = stripOrigin(resolvedHref)\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs\n\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref)\n  const preparedAs = as\n    ? stripOrigin(resolveHref(router, as))\n    : resolvedAs || resolvedHref\n\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs),\n  }\n}\n\nfunction resolveDynamicRoute(pathname: string, pages: string[]) {\n  const cleanPathname = removePathTrailingSlash(denormalizePagePath(pathname!))\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname\n  }\n\n  // handle resolving href for dynamic routes\n  if (!pages.includes(cleanPathname!)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some((page) => {\n      if (isDynamicRoute(page) && getRouteRegex(page).re.test(cleanPathname!)) {\n        pathname = page\n        return true\n      }\n    })\n  }\n  return removePathTrailingSlash(pathname)\n}\n\nexport type BaseRouter = {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n  domainLocales?: DomainLocale[]\n  isLocaleDomain: boolean\n}\n\nexport type NextRouter = BaseRouter &\n  Pick<\n    Router,\n    | 'push'\n    | 'replace'\n    | 'reload'\n    | 'back'\n    | 'prefetch'\n    | 'beforePopState'\n    | 'events'\n    | 'isFallback'\n    | 'isReady'\n    | 'isPreview'\n  >\n\nexport type PrefetchOptions = {\n  priority?: boolean\n  locale?: string | false\n}\n\nexport type PrivateRouteInfo =\n  | (Omit<CompletePrivateRouteInfo, 'styleSheets'> & { initial: true })\n  | CompletePrivateRouteInfo\n\nexport type CompletePrivateRouteInfo = {\n  Component: ComponentType\n  styleSheets: StyleSheetTuple[]\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n  props?: Record<string, any>\n  err?: Error\n  error?: any\n}\n\nexport type AppProps = Pick<CompletePrivateRouteInfo, 'Component' | 'err'> & {\n  router: Router\n} & Record<string, any>\nexport type AppComponent = ComponentType<AppProps>\n\ntype Subscription = (\n  data: PrivateRouteInfo,\n  App: AppComponent,\n  resetScroll: { x: number; y: number } | null\n) => Promise<void>\n\ntype BeforePopStateCallback = (state: NextHistoryState) => boolean\n\ntype ComponentLoadCancel = (() => void) | null\n\ntype HistoryMethod = 'replaceState' | 'pushState'\n\nconst manualScrollRestoration =\n  process.env.__NEXT_SCROLL_RESTORATION &&\n  typeof window !== 'undefined' &&\n  'scrollRestoration' in window.history &&\n  !!(function () {\n    try {\n      let v = '__next'\n      // eslint-disable-next-line no-sequences\n      return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true\n    } catch (n) {}\n  })()\n\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND')\n\nfunction fetchRetry(url: string, attempts: number): Promise<any> {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin',\n  }).then((res) => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1)\n      }\n      if (res.status === 404) {\n        return res.json().then((data) => {\n          if (data.notFound) {\n            return { notFound: SSG_DATA_NOT_FOUND }\n          }\n          throw new Error(`Failed to load static props`)\n        })\n      }\n      throw new Error(`Failed to load static props`)\n    }\n    return res.json()\n  })\n}\n\nfunction fetchNextData(dataHref: string, isServerRender: boolean) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch((err: Error) => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n\n    if (!isServerRender) {\n      markAssetError(err)\n    }\n    throw err\n  })\n}\n\nexport default class Router implements BaseRouter {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n\n  /**\n   * Map of all components loaded in `Router`\n   */\n  components: { [pathname: string]: PrivateRouteInfo }\n  // Static Data Cache\n  sdc: { [asPath: string]: object } = {}\n  // In-flight Server Data Requests, for deduping\n  sdr: { [asPath: string]: Promise<object> } = {}\n\n  sub: Subscription\n  clc: ComponentLoadCancel\n  pageLoader: any\n  _bps: BeforePopStateCallback | undefined\n  events: MittEmitter<RouterEvent>\n  _wrapApp: (App: AppComponent) => any\n  isSsr: boolean\n  isFallback: boolean\n  _inFlightRoute?: string\n  _shallow?: boolean\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n  domainLocales?: DomainLocale[]\n  isReady: boolean\n  isPreview: boolean\n  isLocaleDomain: boolean\n\n  private _idx: number = 0\n\n  static events: MittEmitter<RouterEvent> = mitt()\n\n  constructor(\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      err,\n      subscription,\n      isFallback,\n      locale,\n      locales,\n      defaultLocale,\n      domainLocales,\n      isPreview,\n    }: {\n      subscription: Subscription\n      initialProps: any\n      pageLoader: any\n      Component: ComponentType\n      App: AppComponent\n      wrapApp: (WrapAppComponent: AppComponent) => any\n      err?: Error\n      isFallback: boolean\n      locale?: string\n      locales?: string[]\n      defaultLocale?: string\n      domainLocales?: DomainLocale[]\n      isPreview?: boolean\n    }\n  ) {\n    // represents the current component key\n    this.route = removePathTrailingSlash(pathname)\n\n    // set up the component cache (by route keys)\n    this.components = {}\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n      }\n    }\n\n    this.components['/_app'] = {\n      Component: App as ComponentType,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ],\n    }\n\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events\n\n    this.pageLoader = pageLoader\n    this.pathname = pathname\n    this.query = query\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    const autoExportDynamic =\n      isDynamicRoute(pathname) && self.__NEXT_DATA__.autoExport\n\n    this.asPath = autoExportDynamic ? pathname : as\n    this.basePath = basePath\n    this.sub = subscription\n    this.clc = null\n    this._wrapApp = wrapApp\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true\n\n    this.isFallback = isFallback\n\n    this.isReady = !!(\n      self.__NEXT_DATA__.gssp ||\n      self.__NEXT_DATA__.gip ||\n      (self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp) ||\n      (!autoExportDynamic &&\n        !self.location.search &&\n        !process.env.__NEXT_HAS_REWRITES)\n    )\n    this.isPreview = !!isPreview\n    this.isLocaleDomain = false\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale\n      this.locales = locales\n      this.defaultLocale = defaultLocale\n      this.domainLocales = domainLocales\n      this.isLocaleDomain = !!detectDomainLocale(\n        domainLocales,\n        self.location.hostname\n      )\n    }\n\n    if (typeof window !== 'undefined') {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        const options: TransitionOptions = { locale }\n        ;(options as any)._shouldResolveHref = as !== pathname\n\n        this.changeState(\n          'replaceState',\n          formatWithValidation({ pathname: addBasePath(pathname), query }),\n          getURL(),\n          options\n        )\n      }\n\n      window.addEventListener('popstate', this.onPopState)\n\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual'\n        }\n      }\n    }\n  }\n\n  onPopState = (e: PopStateEvent): void => {\n    const state = e.state as HistoryState\n\n    if (!state) {\n      // We get state as undefined for two reasons.\n      //  1. With older safari (< 8) and older chrome (< 34)\n      //  2. When the URL changed with #\n      //\n      // In the both cases, we don't need to proceed and change the route.\n      // (as it's already changed)\n      // But we can simply replace the state with the new changes.\n      // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n      // So, doing the following for (1) does no harm.\n      const { pathname, query } = this\n      this.changeState(\n        'replaceState',\n        formatWithValidation({ pathname: addBasePath(pathname), query }),\n        getURL()\n      )\n      return\n    }\n\n    if (!state.__N) {\n      return\n    }\n\n    let forcedScroll: { x: number; y: number } | undefined\n    const { url, as, options, idx } = state\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      if (manualScrollRestoration) {\n        if (this._idx !== idx) {\n          // Snapshot current scroll position:\n          try {\n            sessionStorage.setItem(\n              '__next_scroll_' + this._idx,\n              JSON.stringify({ x: self.pageXOffset, y: self.pageYOffset })\n            )\n          } catch {}\n\n          // Restore old scroll position:\n          try {\n            const v = sessionStorage.getItem('__next_scroll_' + idx)\n            forcedScroll = JSON.parse(v!)\n          } catch {\n            forcedScroll = { x: 0, y: 0 }\n          }\n        }\n      }\n    }\n    this._idx = idx\n\n    const { pathname } = parseRelativeUrl(url)\n\n    // Make sure we don't re-render on initial load,\n    // can be caused by navigating back from an external site\n    if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n      return\n    }\n\n    // If the downstream application returns falsy, return.\n    // They will then be responsible for handling the event.\n    if (this._bps && !this._bps(state)) {\n      return\n    }\n\n    this.change(\n      'replaceState',\n      url,\n      as,\n      Object.assign<{}, TransitionOptions, TransitionOptions>({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale,\n      }),\n      forcedScroll\n    )\n  }\n\n  reload(): void {\n    window.location.reload()\n  }\n\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back()\n  }\n\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url: Url, as?: Url, options: TransitionOptions = {}) {\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      // TODO: remove in the future when we update history before route change\n      // is complete, as the popstate event should handle this capture.\n      if (manualScrollRestoration) {\n        try {\n          // Snapshot scroll position right before navigating to a new page:\n          sessionStorage.setItem(\n            '__next_scroll_' + this._idx,\n            JSON.stringify({ x: self.pageXOffset, y: self.pageYOffset })\n          )\n        } catch {}\n      }\n    }\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('pushState', url, as, options)\n  }\n\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url: Url, as?: Url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('replaceState', url, as, options)\n  }\n\n  private async change(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions,\n    forcedScroll?: { x: number; y: number }\n  ): Promise<boolean> {\n    if (!isLocalURL(url)) {\n      window.location.href = url\n      return false\n    }\n    const shouldResolveHref =\n      url === as || (options as any)._h || (options as any)._shouldResolveHref\n\n    // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n    if ((options as any)._h) {\n      this.isReady = true\n    }\n\n    const prevLocale = this.locale\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale =\n        options.locale === false\n          ? this.defaultLocale\n          : options.locale || this.locale\n\n      if (typeof options.locale === 'undefined') {\n        options.locale = this.locale\n      }\n\n      const parsedAs = parseRelativeUrl(hasBasePath(as) ? delBasePath(as) : as)\n      const localePathResult = normalizeLocalePath(\n        parsedAs.pathname,\n        this.locales\n      )\n\n      if (localePathResult.detectedLocale) {\n        this.locale = localePathResult.detectedLocale\n        parsedAs.pathname = addBasePath(parsedAs.pathname)\n        as = formatWithValidation(parsedAs)\n        url = addBasePath(\n          normalizeLocalePath(\n            hasBasePath(url) ? delBasePath(url) : url,\n            this.locales\n          ).pathname\n        )\n      }\n      let didNavigate = false\n\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if the locale isn't configured hard navigate to show 404 page\n        if (!this.locales?.includes(this.locale!)) {\n          parsedAs.pathname = addLocale(parsedAs.pathname, this.locale)\n          window.location.href = formatWithValidation(parsedAs)\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true\n        }\n      }\n\n      const detectedDomain = detectDomainLocale(\n        this.domainLocales,\n        undefined,\n        this.locale\n      )\n\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if we are navigating to a domain locale ensure we redirect to the\n        // correct domain\n        if (\n          !didNavigate &&\n          detectedDomain &&\n          this.isLocaleDomain &&\n          self.location.hostname !== detectedDomain.domain\n        ) {\n          const asNoBasePath = delBasePath(as)\n          window.location.href = `http${detectedDomain.http ? '' : 's'}://${\n            detectedDomain.domain\n          }${addBasePath(\n            `${\n              this.locale === detectedDomain.defaultLocale\n                ? ''\n                : `/${this.locale}`\n            }${asNoBasePath === '/' ? '' : asNoBasePath}` || '/'\n          )}`\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true\n        }\n      }\n\n      if (didNavigate) {\n        return new Promise(() => {})\n      }\n    }\n\n    if (!(options as any)._h) {\n      this.isSsr = false\n    }\n    // marking route changes as a navigation start entry\n    if (ST) {\n      performance.mark('routeChange')\n    }\n\n    const { shallow = false } = options\n    const routeProps = { shallow }\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps)\n    }\n\n    as = addBasePath(\n      addLocale(\n        hasBasePath(as) ? delBasePath(as) : as,\n        options.locale,\n        this.defaultLocale\n      )\n    )\n    const cleanedAs = delLocale(\n      hasBasePath(as) ? delBasePath(as) : as,\n      this.locale\n    )\n    this._inFlightRoute = as\n\n    let localeChange = prevLocale !== this.locale\n\n    // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (\n      !(options as any)._h &&\n      this.onlyAHashChange(cleanedAs) &&\n      !localeChange\n    ) {\n      this.asPath = cleanedAs\n      Router.events.emit('hashChangeStart', as, routeProps)\n      // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, options)\n      this.scrollToHash(cleanedAs)\n      this.notify(this.components[this.route], null)\n      Router.events.emit('hashChangeComplete', as, routeProps)\n      return true\n    }\n\n    let parsed = parseRelativeUrl(url)\n    let { pathname, query } = parsed\n\n    // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    let pages: any, rewrites: any\n    try {\n      pages = await this.pageLoader.getPageList()\n      ;({ __rewrites: rewrites } = await getClientBuildManifest())\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as\n      return false\n    }\n\n    // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState'\n    }\n\n    // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as\n\n    // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname\n      ? removePathTrailingSlash(delBasePath(pathname))\n      : pathname\n\n    if (shouldResolveHref && pathname !== '/_error') {\n      ;(options as any)._shouldResolveHref = true\n\n      if (process.env.__NEXT_HAS_REWRITES && as.startsWith('/')) {\n        const rewritesResult = resolveRewrites(\n          addBasePath(addLocale(cleanedAs, this.locale)),\n          pages,\n          rewrites,\n          query,\n          (p: string) => resolveDynamicRoute(p, pages),\n          this.locales\n        )\n        resolvedAs = rewritesResult.asPath\n\n        if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n          // if this directly matches a page we need to update the href to\n          // allow the correct page chunk to be loaded\n          pathname = rewritesResult.resolvedHref\n          parsed.pathname = addBasePath(pathname)\n          url = formatWithValidation(parsed)\n        }\n      } else {\n        parsed.pathname = resolveDynamicRoute(pathname, pages)\n\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname\n          parsed.pathname = addBasePath(pathname)\n          url = formatWithValidation(parsed)\n        }\n      }\n    }\n\n    const route = removePathTrailingSlash(pathname)\n\n    if (!isLocalURL(as)) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` +\n            `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`\n        )\n      }\n\n      window.location.href = as\n      return false\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale)\n\n    if (isDynamicRoute(route)) {\n      const parsedAs = parseRelativeUrl(resolvedAs)\n      const asPathname = parsedAs.pathname\n\n      const routeRegex = getRouteRegex(route)\n      const routeMatch = getRouteMatcher(routeRegex)(asPathname)\n      const shouldInterpolate = route === asPathname\n      const interpolatedAs = shouldInterpolate\n        ? interpolateAs(route, asPathname, query)\n        : ({} as { result: undefined; params: undefined })\n\n      if (!routeMatch || (shouldInterpolate && !interpolatedAs.result)) {\n        const missingParams = Object.keys(routeRegex.groups).filter(\n          (param) => !query[param]\n        )\n\n        if (missingParams.length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `${\n                shouldInterpolate\n                  ? `Interpolating href`\n                  : `Mismatching \\`as\\` and \\`href\\``\n              } failed to manually provide ` +\n                `the params: ${missingParams.join(\n                  ', '\n                )} in the \\`href\\`'s \\`query\\``\n            )\n          }\n\n          throw new Error(\n            (shouldInterpolate\n              ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(\n                  ', '\n                )}) to be interpolated properly. `\n              : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) +\n              `Read more: https://nextjs.org/docs/messages/${\n                shouldInterpolate\n                  ? 'href-interpolation-failed'\n                  : 'incompatible-href-as'\n              }`\n          )\n        }\n      } else if (shouldInterpolate) {\n        as = formatWithValidation(\n          Object.assign({}, parsedAs, {\n            pathname: interpolatedAs.result,\n            query: omitParmsFromQuery(query, interpolatedAs.params!),\n          })\n        )\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch)\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps)\n\n    try {\n      let routeInfo = await this.getRouteInfo(\n        route,\n        pathname,\n        query,\n        as,\n        resolvedAs,\n        routeProps\n      )\n      let { error, props, __N_SSG, __N_SSP } = routeInfo\n\n      // handle redirect on client-transition\n      if ((__N_SSG || __N_SSP) && props) {\n        if ((props as any).pageProps && (props as any).pageProps.__N_REDIRECT) {\n          const destination = (props as any).pageProps.__N_REDIRECT\n\n          // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n          if (destination.startsWith('/')) {\n            const parsedHref = parseRelativeUrl(destination)\n            parsedHref.pathname = resolveDynamicRoute(\n              parsedHref.pathname,\n              pages\n            )\n\n            const { url: newUrl, as: newAs } = prepareUrlAs(\n              this,\n              destination,\n              destination\n            )\n            return this.change(method, newUrl, newAs, options)\n          }\n\n          window.location.href = destination\n          return new Promise(() => {})\n        }\n\n        this.isPreview = !!props.__N_PREVIEW\n\n        // handle SSG data 404\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute\n\n          try {\n            await this.fetchComponent('/404')\n            notFoundRoute = '/404'\n          } catch (_) {\n            notFoundRoute = '/_error'\n          }\n\n          routeInfo = await this.getRouteInfo(\n            notFoundRoute,\n            notFoundRoute,\n            query,\n            as,\n            resolvedAs,\n            { shallow: false }\n          )\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps)\n      this.changeState(method, url, as, options)\n\n      if (process.env.NODE_ENV !== 'production') {\n        const appComp: any = this.components['/_app'].Component\n        ;(window as any).next.isPrerendered =\n          appComp.getInitialProps === appComp.origGetInitialProps &&\n          !(routeInfo.Component as any).getInitialProps\n      }\n\n      if (\n        (options as any)._h &&\n        pathname === '/_error' &&\n        self.__NEXT_DATA__.props?.pageProps?.statusCode === 500 &&\n        props?.pageProps\n      ) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500\n      }\n\n      // shallow routing is only allowed for same page URL changes.\n      const isValidShallowRoute = options.shallow && this.route === route\n\n      const shouldScroll = options.scroll ?? !isValidShallowRoute\n      const resetScroll = shouldScroll ? { x: 0, y: 0 } : null\n      await this.set(\n        route,\n        pathname!,\n        query,\n        cleanedAs,\n        routeInfo,\n        forcedScroll ?? resetScroll\n      ).catch((e) => {\n        if (e.cancelled) error = error || e\n        else throw e\n      })\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps)\n        throw error\n      }\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        if (this.locale) {\n          document.documentElement.lang = this.locale\n        }\n      }\n      Router.events.emit('routeChangeComplete', as, routeProps)\n\n      return true\n    } catch (err) {\n      if (err.cancelled) {\n        return false\n      }\n      throw err\n    }\n  }\n\n  changeState(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions = {}\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`)\n        return\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`)\n        return\n      }\n    }\n\n    if (method !== 'pushState' || getURL() !== as) {\n      this._shallow = options.shallow\n      window.history[method](\n        {\n          url,\n          as,\n          options,\n          __N: true,\n          idx: (this._idx = method !== 'pushState' ? this._idx : this._idx + 1),\n        } as HistoryState,\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '',\n        as\n      )\n    }\n  }\n\n  async handleRouteInfoError(\n    err: Error & { code: any; cancelled: boolean },\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    routeProps: RouteProperties,\n    loadErrorFail?: boolean\n  ): Promise<CompletePrivateRouteInfo> {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err\n    }\n\n    if (isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps)\n\n      // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as\n\n      // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError()\n    }\n\n    try {\n      let Component: ComponentType\n      let styleSheets: StyleSheetTuple[]\n      let props: Record<string, any> | undefined\n\n      if (\n        typeof Component! === 'undefined' ||\n        typeof styleSheets! === 'undefined'\n      ) {\n        ;({ page: Component, styleSheets } = await this.fetchComponent(\n          '/_error'\n        ))\n      }\n\n      const routeInfo: CompletePrivateRouteInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err,\n      }\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query,\n          } as any)\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr)\n          routeInfo.props = {}\n        }\n      }\n\n      return routeInfo\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(\n        routeInfoErr,\n        pathname,\n        query,\n        as,\n        routeProps,\n        true\n      )\n    }\n  }\n\n  async getRouteInfo(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    resolvedAs: string,\n    routeProps: RouteProperties\n  ): Promise<PrivateRouteInfo> {\n    try {\n      const existingRouteInfo: PrivateRouteInfo | undefined =\n        this.components[route]\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo\n      }\n\n      const cachedRouteInfo: CompletePrivateRouteInfo | undefined =\n        existingRouteInfo && 'initial' in existingRouteInfo\n          ? undefined\n          : existingRouteInfo\n      const routeInfo: CompletePrivateRouteInfo = cachedRouteInfo\n        ? cachedRouteInfo\n        : await this.fetchComponent(route).then((res) => ({\n            Component: res.page,\n            styleSheets: res.styleSheets,\n            __N_SSG: res.mod.__N_SSG,\n            __N_SSP: res.mod.__N_SSP,\n          }))\n\n      const { Component, __N_SSG, __N_SSP } = routeInfo\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { isValidElementType } = require('react-is')\n        if (!isValidElementType(Component)) {\n          throw new Error(\n            `The default export is not a React Component in page: \"${pathname}\"`\n          )\n        }\n      }\n\n      let dataHref: string | undefined\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref(\n          formatWithValidation({ pathname, query }),\n          resolvedAs,\n          __N_SSG,\n          this.locale\n        )\n      }\n\n      const props = await this._getData<CompletePrivateRouteInfo>(() =>\n        __N_SSG\n          ? this._getStaticData(dataHref!)\n          : __N_SSP\n          ? this._getServerData(dataHref!)\n          : this.getInitialProps(\n              Component,\n              // we provide AppTree later so this needs to be `any`\n              {\n                pathname,\n                query,\n                asPath: as,\n                locale: this.locale,\n                locales: this.locales,\n                defaultLocale: this.defaultLocale,\n              } as any\n            )\n      )\n\n      routeInfo.props = props\n      this.components[route] = routeInfo\n      return routeInfo\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as, routeProps)\n    }\n  }\n\n  set(\n    route: string,\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    data: PrivateRouteInfo,\n    resetScroll: { x: number; y: number } | null\n  ): Promise<void> {\n    this.isFallback = false\n\n    this.route = route\n    this.pathname = pathname\n    this.query = query\n    this.asPath = as\n    return this.notify(data, resetScroll)\n  }\n\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb: BeforePopStateCallback) {\n    this._bps = cb\n  }\n\n  onlyAHashChange(as: string): boolean {\n    if (!this.asPath) return false\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#')\n    const [newUrlNoHash, newHash] = as.split('#')\n\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true\n    }\n\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false\n    }\n\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash\n  }\n\n  scrollToHash(as: string): void {\n    const [, hash] = as.split('#')\n    // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0)\n      return\n    }\n\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash)\n    if (idEl) {\n      idEl.scrollIntoView()\n      return\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0]\n    if (nameEl) {\n      nameEl.scrollIntoView()\n    }\n  }\n\n  urlIsNew(asPath: string): boolean {\n    return this.asPath !== asPath\n  }\n\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  async prefetch(\n    url: string,\n    asPath: string = url,\n    options: PrefetchOptions = {}\n  ): Promise<void> {\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname } = parsed\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      if (options.locale === false) {\n        pathname = normalizeLocalePath!(pathname, this.locales).pathname\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n\n        let parsedAs = parseRelativeUrl(asPath)\n        const localePathResult = normalizeLocalePath!(\n          parsedAs.pathname,\n          this.locales\n        )\n        parsedAs.pathname = localePathResult.pathname\n        options.locale = localePathResult.detectedLocale || this.defaultLocale\n        asPath = formatWithValidation(parsedAs)\n      }\n    }\n\n    const pages = await this.pageLoader.getPageList()\n    let resolvedAs = asPath\n\n    if (process.env.__NEXT_HAS_REWRITES && asPath.startsWith('/')) {\n      let rewrites: any\n      ;({ __rewrites: rewrites } = await getClientBuildManifest())\n\n      const rewritesResult = resolveRewrites(\n        addBasePath(addLocale(asPath, this.locale)),\n        pages,\n        rewrites,\n        parsed.query,\n        (p: string) => resolveDynamicRoute(p, pages),\n        this.locales\n      )\n      resolvedAs = delLocale(delBasePath(rewritesResult.asPath), this.locale)\n\n      if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n        // if this directly matches a page we need to update the href to\n        // allow the correct page chunk to be loaded\n        pathname = rewritesResult.resolvedHref\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n      }\n    } else {\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages)\n\n      if (parsed.pathname !== pathname) {\n        pathname = parsed.pathname\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n      }\n    }\n    const route = removePathTrailingSlash(pathname)\n\n    // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (process.env.NODE_ENV !== 'production') {\n      return\n    }\n\n    await Promise.all([\n      this.pageLoader._isSsg(route).then((isSsg: boolean) => {\n        return isSsg\n          ? this._getStaticData(\n              this.pageLoader.getDataHref(\n                url,\n                resolvedAs,\n                true,\n                typeof options.locale !== 'undefined'\n                  ? options.locale\n                  : this.locale\n              )\n            )\n          : false\n      }),\n      this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n    ])\n  }\n\n  async fetchComponent(route: string): Promise<GoodPageCache> {\n    let cancelled = false\n    const cancel = (this.clc = () => {\n      cancelled = true\n    })\n\n    const componentResult = await this.pageLoader.loadPage(route)\n\n    if (cancelled) {\n      const error: any = new Error(\n        `Abort fetching component for route: \"${route}\"`\n      )\n      error.cancelled = true\n      throw error\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null\n    }\n\n    return componentResult\n  }\n\n  _getData<T>(fn: () => Promise<T>): Promise<T> {\n    let cancelled = false\n    const cancel = () => {\n      cancelled = true\n    }\n    this.clc = cancel\n    return fn().then((data) => {\n      if (cancel === this.clc) {\n        this.clc = null\n      }\n\n      if (cancelled) {\n        const err: any = new Error('Loading initial props cancelled')\n        err.cancelled = true\n        throw err\n      }\n\n      return data\n    })\n  }\n\n  _getStaticData(dataHref: string): Promise<object> {\n    const { href: cacheKey } = new URL(dataHref, window.location.href)\n    if (\n      process.env.NODE_ENV === 'production' &&\n      !this.isPreview &&\n      this.sdc[cacheKey]\n    ) {\n      return Promise.resolve(this.sdc[cacheKey])\n    }\n    return fetchNextData(dataHref, this.isSsr).then((data) => {\n      this.sdc[cacheKey] = data\n      return data\n    })\n  }\n\n  _getServerData(dataHref: string): Promise<object> {\n    const { href: resourceKey } = new URL(dataHref, window.location.href)\n    if (this.sdr[resourceKey]) {\n      return this.sdr[resourceKey]\n    }\n    return (this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr)\n      .then((data) => {\n        delete this.sdr[resourceKey]\n        return data\n      })\n      .catch((err) => {\n        delete this.sdr[resourceKey]\n        throw err\n      }))\n  }\n\n  getInitialProps(\n    Component: ComponentType,\n    ctx: NextPageContext\n  ): Promise<any> {\n    const { Component: App } = this.components['/_app']\n    const AppTree = this._wrapApp(App as AppComponent)\n    ctx.AppTree = AppTree\n    return loadGetInitialProps<AppContextType<Router>>(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx,\n    })\n  }\n\n  abortComponentLoad(as: string, routeProps: RouteProperties): void {\n    if (this.clc) {\n      Router.events.emit(\n        'routeChangeError',\n        buildCancellationError(),\n        as,\n        routeProps\n      )\n      this.clc()\n      this.clc = null\n    }\n  }\n\n  notify(\n    data: PrivateRouteInfo,\n    resetScroll: { x: number; y: number } | null\n  ): Promise<void> {\n    return this.sub(\n      data,\n      this.components['/_app'].Component as AppComponent,\n      resetScroll\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}