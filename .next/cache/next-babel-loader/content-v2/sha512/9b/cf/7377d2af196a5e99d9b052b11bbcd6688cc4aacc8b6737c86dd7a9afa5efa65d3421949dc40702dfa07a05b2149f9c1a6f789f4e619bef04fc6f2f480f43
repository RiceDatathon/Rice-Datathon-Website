{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/gazifuad/Documents/Documents - Gazi's MacBook Pro/GitHub/Rice-Datathon-Website/node_modules/next/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/gazifuad/Documents/Documents - Gazi's MacBook Pro/GitHub/Rice-Datathon-Website/node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/gazifuad/Documents/Documents - Gazi's MacBook Pro/GitHub/Rice-Datathon-Website/node_modules/next/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/gazifuad/Documents/Documents - Gazi's MacBook Pro/GitHub/Rice-Datathon-Website/node_modules/next/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _slicedToArray = require(\"/Users/gazifuad/Documents/Documents - Gazi's MacBook Pro/GitHub/Rice-Datathon-Website/node_modules/next/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports[\"default\"] = void 0;\n\nvar _normalizeTrailingSlash = require(\"../../../client/normalize-trailing-slash\");\n\nvar _routeLoader = require(\"../../../client/route-loader\");\n\nvar _denormalizePagePath = require(\"../../../server/denormalize-page-path\");\n\nvar _normalizeLocalePath = require(\"../i18n/normalize-locale-path\");\n\nvar _mitt = _interopRequireDefault(require(\"../mitt\"));\n\nvar _utils = require(\"../utils\");\n\nvar _isDynamic = require(\"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"./utils/parse-relative-url\");\n\nvar _querystring = require(\"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(require(\"./utils/resolve-rewrites\"));\n\nvar _routeMatcher = require(\"./utils/route-matcher\");\n\nvar _routeRegex = require(\"./utils/route-regex\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar detectDomainLocale;\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  detectDomainLocale = require('../i18n/detect-domain-locale').detectDomainLocale;\n}\n\nvar basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash).normalizePathTrailingSlash(prefix) : \"\".concat(prefix).concat(pathNoQueryHash(path) === '/' ? path.substring(1) : path) : path;\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    locale = locale || (0, _normalizeLocalePath).normalizeLocalePath(path, locales).detectedLocale;\n    var detectedDomain = detectDomainLocale(domainLocales, undefined, locale);\n\n    if (detectedDomain) {\n      return \"http\".concat(detectedDomain.http ? '' : 's', \"://\").concat(detectedDomain.domain).concat(basePath || '').concat(locale === detectedDomain.defaultLocale ? '' : \"/\".concat(locale)).concat(path);\n    }\n\n    return false;\n  } else {\n    return false;\n  }\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    var pathname = pathNoQueryHash(path);\n    var pathLower = pathname.toLowerCase();\n    var localeLower = locale && locale.toLowerCase();\n    return locale && locale !== defaultLocale && !pathLower.startsWith('/' + localeLower + '/') && pathLower !== '/' + localeLower ? addPathPrefix(path, '/' + locale) : path;\n  }\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    var pathname = pathNoQueryHash(path);\n    var pathLower = pathname.toLowerCase();\n    var localeLower = locale && locale.toLowerCase();\n    return locale && (pathLower.startsWith('/' + localeLower + '/') || pathLower === '/' + localeLower) ? (pathname.length === locale.length + 1 ? '/' : '') + path.substr(locale.length + 1) : path;\n  }\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  var queryIndex = path.indexOf('?');\n  var hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  path = pathNoQueryHash(path);\n  return path === basePath || path.startsWith(basePath + '/');\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = \"/\".concat(path);\n  return path;\n}\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    var locationOrigin = (0, _utils).getLocationOrigin();\n    var resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  var interpolatedRoute = '';\n  var dynamicRegex = (0, _routeRegex).getRouteRegex(route);\n  var dynamicGroups = dynamicRegex.groups;\n  var dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  var params = Object.keys(dynamicGroups);\n\n  if (!params.every(function (param) {\n    var value = dynamicMatches[param] || '';\n    var _dynamicGroups$param = dynamicGroups[param],\n        repeat = _dynamicGroups$param.repeat,\n        optional = _dynamicGroups$param.optional; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    var replaced = \"[\".concat(repeat ? '...' : '').concat(param, \"]\");\n\n    if (optional) {\n      replaced = \"\".concat(!value ? '/' : '', \"[\").concat(replaced, \"]\");\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    function (segment) {\n      return encodeURIComponent(segment);\n    }).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = '' // did not satisfy all requirements\n    ; // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params: params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  var filteredQuery = {};\n  Object.keys(query).forEach(function (key) {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n\nfunction resolveHref(router, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  var base;\n  var urlAsString = typeof href === 'string' ? href : (0, _utils).formatWithValidation(href); // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n\n  var urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n  var urlAsStringNoProto = urlProtoMatch ? urlAsString.substr(urlProtoMatch[0].length) : urlAsString;\n  var urlParts = urlAsStringNoProto.split('?');\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(\"Invalid href passed to next/router: \".concat(urlAsString, \", repeated forward-slashes (//) or backslashes \\\\ are not valid in the href\"));\n    var normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;\n  } // Return because it cannot be routed by the Next.js router\n\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n');\n  }\n\n  try {\n    var finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);\n    var interpolatedAs = '';\n\n    if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      var query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);\n\n      var _interpolateAs = interpolateAs(finalUrl.pathname, finalUrl.pathname, query),\n          result = _interpolateAs.result,\n          params = _interpolateAs.params;\n\n      if (result) {\n        interpolatedAs = (0, _utils).formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    var resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  var origin = (0, _utils).getLocationOrigin();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  var _resolveHref = resolveHref(router, url, true),\n      _resolveHref2 = _slicedToArray(_resolveHref, 2),\n      resolvedHref = _resolveHref2[0],\n      resolvedAs = _resolveHref2[1];\n\n  var origin = (0, _utils).getLocationOrigin();\n  var hrefHadOrigin = resolvedHref.startsWith(origin);\n  var asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  var preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  var preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  var cleanPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(function (page) {\n      if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n}\n\nvar manualScrollRestoration = process.env.__NEXT_SCROLL_RESTORATION && true && 'scrollRestoration' in window.history && !!function () {\n  try {\n    var v = '__next'; // eslint-disable-next-line no-sequences\n\n    return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true;\n  } catch (n) {}\n}();\nvar SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(function (res) {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(function (data) {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(\"Failed to load static props\");\n        });\n      }\n\n      throw new Error(\"Failed to load static props\");\n    }\n\n    return res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1)[\"catch\"](function (err) {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader).markAssetError(err);\n    }\n\n    throw err;\n  });\n}\n\nvar Router = /*#__PURE__*/function () {\n  function Router(pathname1, query1, as1, _ref) {\n    var _this = this;\n\n    var initialProps = _ref.initialProps,\n        pageLoader = _ref.pageLoader,\n        App = _ref.App,\n        wrapApp = _ref.wrapApp,\n        Component1 = _ref.Component,\n        err1 = _ref.err,\n        subscription = _ref.subscription,\n        isFallback = _ref.isFallback,\n        locale = _ref.locale,\n        locales = _ref.locales,\n        defaultLocale = _ref.defaultLocale,\n        domainLocales = _ref.domainLocales,\n        isPreview = _ref.isPreview;\n\n    _classCallCheck(this, Router);\n\n    // Static Data Cache\n    this.sdc = {}; // In-flight Server Data Requests, for deduping\n\n    this.sdr = {};\n    this._idx = 0;\n\n    this.onPopState = function (e) {\n      var state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        var _pathname = _this.pathname,\n            _query = _this.query;\n\n        _this.changeState('replaceState', (0, _utils).formatWithValidation({\n          pathname: addBasePath(_pathname),\n          query: _query\n        }), (0, _utils).getURL());\n\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      var forcedScroll;\n      var url = state.url,\n          as1 = state.as,\n          options = state.options,\n          idx = state.idx;\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          if (_this._idx !== idx) {\n            // Snapshot current scroll position:\n            try {\n              sessionStorage.setItem('__next_scroll_' + _this._idx, JSON.stringify({\n                x: self.pageXOffset,\n                y: self.pageYOffset\n              }));\n            } catch (_unused) {} // Restore old scroll position:\n\n\n            try {\n              var v = sessionStorage.getItem('__next_scroll_' + idx);\n              forcedScroll = JSON.parse(v);\n            } catch (_unused2) {\n              forcedScroll = {\n                x: 0,\n                y: 0\n              };\n            }\n          }\n        }\n      }\n\n      _this._idx = idx;\n\n      var _parseRelativeUrl2 = (0, _parseRelativeUrl).parseRelativeUrl(url),\n          pathname1 = _parseRelativeUrl2.pathname; // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (_this.isSsr && as1 === _this.asPath && pathname1 === _this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (_this._bps && !_this._bps(state)) {\n        return;\n      }\n\n      _this.change('replaceState', url, as1, Object.assign({}, options, {\n        shallow: options.shallow && _this._shallow,\n        locale: options.locale || _this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    this.route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname1 !== '/_error') {\n      this.components[this.route] = {\n        Component: Component1,\n        initial: true,\n        props: initialProps,\n        err: err1,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: []\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname1;\n    this.query = query1; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    var autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname1) && self.__NEXT_DATA__.autoExport;\n\n    this.asPath = autoExportDynamic ? pathname1 : as1;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !process.env.__NEXT_HAS_REWRITES);\n    this.isPreview = !!isPreview;\n    this.isLocaleDomain = false;\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale;\n      this.locales = locales;\n      this.defaultLocale = defaultLocale;\n      this.domainLocales = domainLocales;\n      this.isLocaleDomain = !!detectDomainLocale(domainLocales, self.location.hostname);\n    }\n\n    if (true) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as1.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        var options = {\n          locale: locale\n        };\n        options._shouldResolveHref = as1 !== pathname1;\n        this.changeState('replaceState', (0, _utils).formatWithValidation({\n          pathname: addBasePath(pathname1),\n          query: query1\n        }), (0, _utils).getURL(), options);\n      }\n\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual';\n        }\n      }\n    }\n  }\n\n  _createClass(Router, [{\n    key: \"reload\",\n    value: function reload() {\n      window.location.reload();\n    }\n    /**\n    * Go back in history\n    */\n\n  }, {\n    key: \"back\",\n    value: function back() {\n      window.history.back();\n    }\n    /**\n    * Performs a `pushState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n\n  }, {\n    key: \"push\",\n    value: function push(url, as) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        // TODO: remove in the future when we update history before route change\n        // is complete, as the popstate event should handle this capture.\n        if (manualScrollRestoration) {\n          try {\n            // Snapshot scroll position right before navigating to a new page:\n            sessionStorage.setItem('__next_scroll_' + this._idx, JSON.stringify({\n              x: self.pageXOffset,\n              y: self.pageYOffset\n            }));\n          } catch (_unused3) {}\n        }\n      }\n\n      var _prepareUrlAs = prepareUrlAs(this, url, as);\n\n      url = _prepareUrlAs.url;\n      as = _prepareUrlAs.as;\n      return this.change('pushState', url, as, options);\n    }\n    /**\n    * Performs a `replaceState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n\n  }, {\n    key: \"replace\",\n    value: function replace(url, as) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _prepareUrlAs2 = prepareUrlAs(this, url, as);\n\n      url = _prepareUrlAs2.url;\n      as = _prepareUrlAs2.as;\n      return this.change('replaceState', url, as, options);\n    }\n  }, {\n    key: \"change\",\n    value: function () {\n      var _change = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, url, as, options, forcedScroll) {\n        var shouldResolveHref, prevLocale, parsedAs, localePathResult, didNavigate, ref, detectedDomain, asNoBasePath, _options$shallow, shallow, routeProps, cleanedAs, localeChange, parsed, pathname1, query1, pages, rewrites, _yield$getClientBuild, resolvedAs, rewritesResult, route, _parsedAs, asPathname, routeRegex, routeMatch, shouldInterpolate, interpolatedAs, missingParams, ref1, routeInfo, _routeInfo, error, props, __N_SSG, __N_SSP, destination, parsedHref, _prepareUrlAs3, newUrl, newAs, notFoundRoute, appComp, isValidShallowRoute, _scroll, shouldScroll, resetScroll;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (isLocalURL(url)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                window.location.href = url;\n                return _context.abrupt(\"return\", false);\n\n              case 3:\n                shouldResolveHref = url === as || options._h || options._shouldResolveHref; // for static pages with query params in the URL we delay\n                // marking the router ready until after the query is updated\n\n                if (options._h) {\n                  this.isReady = true;\n                }\n\n                prevLocale = this.locale;\n\n                if (!process.env.__NEXT_I18N_SUPPORT) {\n                  _context.next = 18;\n                  break;\n                }\n\n                this.locale = options.locale === false ? this.defaultLocale : options.locale || this.locale;\n\n                if (typeof options.locale === 'undefined') {\n                  options.locale = this.locale;\n                }\n\n                parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(hasBasePath(as) ? delBasePath(as) : as);\n                localePathResult = (0, _normalizeLocalePath).normalizeLocalePath(parsedAs.pathname, this.locales);\n\n                if (localePathResult.detectedLocale) {\n                  this.locale = localePathResult.detectedLocale;\n                  parsedAs.pathname = addBasePath(parsedAs.pathname);\n                  as = (0, _utils).formatWithValidation(parsedAs);\n                  url = addBasePath((0, _normalizeLocalePath).normalizeLocalePath(hasBasePath(url) ? delBasePath(url) : url, this.locales).pathname);\n                }\n\n                didNavigate = false; // we need to wrap this in the env check again since regenerator runtime\n                // moves this on its own due to the return\n\n                if (process.env.__NEXT_I18N_SUPPORT) {\n                  // if the locale isn't configured hard navigate to show 404 page\n                  if (!((ref = this.locales) === null || ref === void 0 ? void 0 : ref.includes(this.locale))) {\n                    parsedAs.pathname = addLocale(parsedAs.pathname, this.locale);\n                    window.location.href = (0, _utils).formatWithValidation(parsedAs); // this was previously a return but was removed in favor\n                    // of better dead code elimination with regenerator runtime\n\n                    didNavigate = true;\n                  }\n                }\n\n                detectedDomain = detectDomainLocale(this.domainLocales, undefined, this.locale); // we need to wrap this in the env check again since regenerator runtime\n                // moves this on its own due to the return\n\n                if (process.env.__NEXT_I18N_SUPPORT) {\n                  // if we are navigating to a domain locale ensure we redirect to the\n                  // correct domain\n                  if (!didNavigate && detectedDomain && this.isLocaleDomain && self.location.hostname !== detectedDomain.domain) {\n                    asNoBasePath = delBasePath(as);\n                    window.location.href = \"http\".concat(detectedDomain.http ? '' : 's', \"://\").concat(detectedDomain.domain).concat(addBasePath(\"\".concat(this.locale === detectedDomain.defaultLocale ? '' : \"/\".concat(this.locale)).concat(asNoBasePath === '/' ? '' : asNoBasePath) || '/')); // this was previously a return but was removed in favor\n                    // of better dead code elimination with regenerator runtime\n\n                    didNavigate = true;\n                  }\n                }\n\n                if (!didNavigate) {\n                  _context.next = 18;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", new Promise(function () {}));\n\n              case 18:\n                if (!options._h) {\n                  this.isSsr = false;\n                } // marking route changes as a navigation start entry\n\n\n                if (_utils.ST) {\n                  performance.mark('routeChange');\n                }\n\n                _options$shallow = options.shallow, shallow = _options$shallow === void 0 ? false : _options$shallow;\n                routeProps = {\n                  shallow: shallow\n                };\n\n                if (this._inFlightRoute) {\n                  this.abortComponentLoad(this._inFlightRoute, routeProps);\n                }\n\n                as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));\n                cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);\n                this._inFlightRoute = as;\n                localeChange = prevLocale !== this.locale; // If the url change is only related to a hash change\n                // We should not proceed. We should only change the state.\n                // WARNING: `_h` is an internal option for handing Next.js client-side\n                // hydration. Your app should _never_ use this property. It may change at\n                // any time without notice.\n\n                if (!(!options._h && this.onlyAHashChange(cleanedAs) && !localeChange)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                this.asPath = cleanedAs;\n                Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n                this.changeState(method, url, as, options);\n                this.scrollToHash(cleanedAs);\n                this.notify(this.components[this.route], null);\n                Router.events.emit('hashChangeComplete', as, routeProps);\n                return _context.abrupt(\"return\", true);\n\n              case 35:\n                parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n                pathname1 = parsed.pathname, query1 = parsed.query; // The build manifest needs to be loaded before auto-static dynamic pages\n                // get their query parameters to allow ensuring they can be parsed properly\n                // when rewritten to\n\n                _context.prev = 37;\n                _context.next = 40;\n                return this.pageLoader.getPageList();\n\n              case 40:\n                pages = _context.sent;\n                _context.next = 43;\n                return (0, _routeLoader).getClientBuildManifest();\n\n              case 43:\n                _yield$getClientBuild = _context.sent;\n                rewrites = _yield$getClientBuild.__rewrites;\n                _context.next = 51;\n                break;\n\n              case 47:\n                _context.prev = 47;\n                _context.t0 = _context[\"catch\"](37);\n                // If we fail to resolve the page list or client-build manifest, we must\n                // do a server-side transition:\n                window.location.href = as;\n                return _context.abrupt(\"return\", false);\n\n              case 51:\n                // If asked to change the current URL we should reload the current page\n                // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n                // We also need to set the method = replaceState always\n                // as this should not go into the history (That's how browsers work)\n                // We should compare the new asPath to the current asPath, not the url\n                if (!this.urlIsNew(cleanedAs) && !localeChange) {\n                  method = 'replaceState';\n                } // we need to resolve the as value using rewrites for dynamic SSG\n                // pages to allow building the data URL correctly\n\n\n                resolvedAs = as; // url and as should always be prefixed with basePath by this\n                // point by either next/link or router.push/replace so strip the\n                // basePath from the pathname to match the pages dir 1-to-1\n\n                pathname1 = pathname1 ? (0, _normalizeTrailingSlash).removePathTrailingSlash(delBasePath(pathname1)) : pathname1;\n\n                if (shouldResolveHref && pathname1 !== '/_error') {\n                  options._shouldResolveHref = true;\n\n                  if (process.env.__NEXT_HAS_REWRITES && as.startsWith('/')) {\n                    rewritesResult = (0, _resolveRewrites)[\"default\"](addBasePath(addLocale(cleanedAs, this.locale)), pages, rewrites, query1, function (p) {\n                      return resolveDynamicRoute(p, pages);\n                    }, this.locales);\n                    resolvedAs = rewritesResult.asPath;\n\n                    if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n                      // if this directly matches a page we need to update the href to\n                      // allow the correct page chunk to be loaded\n                      pathname1 = rewritesResult.resolvedHref;\n                      parsed.pathname = addBasePath(pathname1);\n                      url = (0, _utils).formatWithValidation(parsed);\n                    }\n                  } else {\n                    parsed.pathname = resolveDynamicRoute(pathname1, pages);\n\n                    if (parsed.pathname !== pathname1) {\n                      pathname1 = parsed.pathname;\n                      parsed.pathname = addBasePath(pathname1);\n                      url = (0, _utils).formatWithValidation(parsed);\n                    }\n                  }\n                }\n\n                route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1);\n\n                if (isLocalURL(as)) {\n                  _context.next = 61;\n                  break;\n                }\n\n                if (!true) {\n                  _context.next = 59;\n                  break;\n                }\n\n                throw new Error(\"Invalid href: \\\"\".concat(url, \"\\\" and as: \\\"\").concat(as, \"\\\", received relative href and external as\") + \"\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as\");\n\n              case 59:\n                window.location.href = as;\n                return _context.abrupt(\"return\", false);\n\n              case 61:\n                resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);\n\n                if (!(0, _isDynamic).isDynamicRoute(route)) {\n                  _context.next = 77;\n                  break;\n                }\n\n                _parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n                asPathname = _parsedAs.pathname;\n                routeRegex = (0, _routeRegex).getRouteRegex(route);\n                routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n                shouldInterpolate = route === asPathname;\n                interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query1) : {};\n\n                if (!(!routeMatch || shouldInterpolate && !interpolatedAs.result)) {\n                  _context.next = 76;\n                  break;\n                }\n\n                missingParams = Object.keys(routeRegex.groups).filter(function (param) {\n                  return !query1[param];\n                });\n\n                if (!(missingParams.length > 0)) {\n                  _context.next = 74;\n                  break;\n                }\n\n                if (true) {\n                  console.warn(\"\".concat(shouldInterpolate ? \"Interpolating href\" : \"Mismatching `as` and `href`\", \" failed to manually provide \") + \"the params: \".concat(missingParams.join(', '), \" in the `href`'s `query`\"));\n                }\n\n                throw new Error((shouldInterpolate ? \"The provided `href` (\".concat(url, \") value is missing query values (\").concat(missingParams.join(', '), \") to be interpolated properly. \") : \"The provided `as` value (\".concat(asPathname, \") is incompatible with the `href` value (\").concat(route, \"). \")) + \"Read more: https://nextjs.org/docs/messages/\".concat(shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'));\n\n              case 74:\n                _context.next = 77;\n                break;\n\n              case 76:\n                if (shouldInterpolate) {\n                  as = (0, _utils).formatWithValidation(Object.assign({}, _parsedAs, {\n                    pathname: interpolatedAs.result,\n                    query: omitParmsFromQuery(query1, interpolatedAs.params)\n                  }));\n                } else {\n                  // Merge params into `query`, overwriting any specified in search\n                  Object.assign(query1, routeMatch);\n                }\n\n              case 77:\n                Router.events.emit('routeChangeStart', as, routeProps);\n                _context.prev = 78;\n                _context.next = 81;\n                return this.getRouteInfo(route, pathname1, query1, as, resolvedAs, routeProps);\n\n              case 81:\n                routeInfo = _context.sent;\n                _routeInfo = routeInfo, error = _routeInfo.error, props = _routeInfo.props, __N_SSG = _routeInfo.__N_SSG, __N_SSP = _routeInfo.__N_SSP; // handle redirect on client-transition\n\n                if (!((__N_SSG || __N_SSP) && props)) {\n                  _context.next = 107;\n                  break;\n                }\n\n                if (!(props.pageProps && props.pageProps.__N_REDIRECT)) {\n                  _context.next = 93;\n                  break;\n                }\n\n                destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n                // client-navigation if it is falling back to hard navigation if\n                // it's not\n\n                if (!destination.startsWith('/')) {\n                  _context.next = 91;\n                  break;\n                }\n\n                parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n                parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n                _prepareUrlAs3 = prepareUrlAs(this, destination, destination), newUrl = _prepareUrlAs3.url, newAs = _prepareUrlAs3.as;\n                return _context.abrupt(\"return\", this.change(method, newUrl, newAs, options));\n\n              case 91:\n                window.location.href = destination;\n                return _context.abrupt(\"return\", new Promise(function () {}));\n\n              case 93:\n                this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n                if (!(props.notFound === SSG_DATA_NOT_FOUND)) {\n                  _context.next = 107;\n                  break;\n                }\n\n                _context.prev = 95;\n                _context.next = 98;\n                return this.fetchComponent('/404');\n\n              case 98:\n                notFoundRoute = '/404';\n                _context.next = 104;\n                break;\n\n              case 101:\n                _context.prev = 101;\n                _context.t1 = _context[\"catch\"](95);\n                notFoundRoute = '/_error';\n\n              case 104:\n                _context.next = 106;\n                return this.getRouteInfo(notFoundRoute, notFoundRoute, query1, as, resolvedAs, {\n                  shallow: false\n                });\n\n              case 106:\n                routeInfo = _context.sent;\n\n              case 107:\n                Router.events.emit('beforeHistoryChange', as, routeProps);\n                this.changeState(method, url, as, options);\n\n                if (true) {\n                  appComp = this.components['/_app'].Component;\n                  window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n                }\n\n                if (options._h && pathname1 === '/_error' && ((ref = self.__NEXT_DATA__.props) === null || ref === void 0 ? void 0 : (ref1 = ref.pageProps) === null || ref1 === void 0 ? void 0 : ref1.statusCode) === 500 && (props === null || props === void 0 ? void 0 : props.pageProps)) {\n                  // ensure statusCode is still correct for static 500 page\n                  // when updating query information\n                  props.pageProps.statusCode = 500;\n                } // shallow routing is only allowed for same page URL changes.\n\n\n                isValidShallowRoute = options.shallow && this.route === route;\n                shouldScroll = (_scroll = options.scroll) !== null && _scroll !== void 0 ? _scroll : !isValidShallowRoute;\n                resetScroll = shouldScroll ? {\n                  x: 0,\n                  y: 0\n                } : null;\n                _context.next = 116;\n                return this.set(route, pathname1, query1, cleanedAs, routeInfo, forcedScroll !== null && forcedScroll !== void 0 ? forcedScroll : resetScroll)[\"catch\"](function (e) {\n                  if (e.cancelled) error = error || e;else throw e;\n                });\n\n              case 116:\n                if (!error) {\n                  _context.next = 119;\n                  break;\n                }\n\n                Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n                throw error;\n\n              case 119:\n                if (process.env.__NEXT_I18N_SUPPORT) {\n                  if (this.locale) {\n                    document.documentElement.lang = this.locale;\n                  }\n                }\n\n                Router.events.emit('routeChangeComplete', as, routeProps);\n                return _context.abrupt(\"return\", true);\n\n              case 124:\n                _context.prev = 124;\n                _context.t2 = _context[\"catch\"](78);\n\n                if (!_context.t2.cancelled) {\n                  _context.next = 128;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 128:\n                throw _context.t2;\n\n              case 129:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[37, 47], [78, 124], [95, 101]]);\n      }));\n\n      function change(_x, _x2, _x3, _x4, _x5) {\n        return _change.apply(this, arguments);\n      }\n\n      return change;\n    }()\n  }, {\n    key: \"changeState\",\n    value: function changeState(method, url, as) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (true) {\n        if (typeof window.history === 'undefined') {\n          console.error(\"Warning: window.history is not available.\");\n          return;\n        }\n\n        if (typeof window.history[method] === 'undefined') {\n          console.error(\"Warning: window.history.\".concat(method, \" is not available\"));\n          return;\n        }\n      }\n\n      if (method !== 'pushState' || (0, _utils).getURL() !== as) {\n        this._shallow = options.shallow;\n        window.history[method]({\n          url: url,\n          as: as,\n          options: options,\n          __N: true,\n          idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n        }, // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '', as);\n      }\n    }\n  }, {\n    key: \"handleRouteInfoError\",\n    value: function () {\n      var _handleRouteInfoError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(err, pathname, query, as, routeProps, loadErrorFail) {\n        var Component1, styleSheets, props, _yield$this$fetchComp, routeInfo;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!err.cancelled) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw err;\n\n              case 2:\n                if (!((0, _routeLoader).isAssetError(err) || loadErrorFail)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n                //  1. Page doesn't exists\n                //  2. Page does exist in a different zone\n                //  3. Internal error while loading the page\n                // So, doing a hard reload is the proper way to deal with this.\n\n                window.location.href = as; // Changing the URL doesn't block executing the current code path.\n                // So let's throw a cancellation error stop the routing logic.\n\n                throw buildCancellationError();\n\n              case 6:\n                _context2.prev = 6;\n\n                if (!(typeof Component1 === 'undefined' || typeof styleSheets === 'undefined')) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.next = 10;\n                return this.fetchComponent('/_error');\n\n              case 10:\n                _yield$this$fetchComp = _context2.sent;\n                Component1 = _yield$this$fetchComp.page;\n                styleSheets = _yield$this$fetchComp.styleSheets;\n\n              case 13:\n                routeInfo = {\n                  props: props,\n                  Component: Component1,\n                  styleSheets: styleSheets,\n                  err: err,\n                  error: err\n                };\n\n                if (routeInfo.props) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                _context2.prev = 15;\n                _context2.next = 18;\n                return this.getInitialProps(Component1, {\n                  err: err,\n                  pathname: pathname,\n                  query: query\n                });\n\n              case 18:\n                routeInfo.props = _context2.sent;\n                _context2.next = 25;\n                break;\n\n              case 21:\n                _context2.prev = 21;\n                _context2.t0 = _context2[\"catch\"](15);\n                console.error('Error in error page `getInitialProps`: ', _context2.t0);\n                routeInfo.props = {};\n\n              case 25:\n                return _context2.abrupt(\"return\", routeInfo);\n\n              case 28:\n                _context2.prev = 28;\n                _context2.t1 = _context2[\"catch\"](6);\n                return _context2.abrupt(\"return\", this.handleRouteInfoError(_context2.t1, pathname, query, as, routeProps, true));\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 28], [15, 21]]);\n      }));\n\n      function handleRouteInfoError(_x6, _x7, _x8, _x9, _x10, _x11) {\n        return _handleRouteInfoError.apply(this, arguments);\n      }\n\n      return handleRouteInfoError;\n    }()\n  }, {\n    key: \"getRouteInfo\",\n    value: function () {\n      var _getRouteInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(route, pathname, query, as, resolvedAs, routeProps) {\n        var _this2 = this;\n\n        var existingRouteInfo, cachedRouteInfo, routeInfo, Component1, __N_SSG, __N_SSP, _require, isValidElementType, dataHref, props;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                existingRouteInfo = this.components[route];\n\n                if (!(routeProps.shallow && existingRouteInfo && this.route === route)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", existingRouteInfo);\n\n              case 4:\n                cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;\n\n                if (!cachedRouteInfo) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                _context3.t0 = cachedRouteInfo;\n                _context3.next = 12;\n                break;\n\n              case 9:\n                _context3.next = 11;\n                return this.fetchComponent(route).then(function (res) {\n                  return {\n                    Component: res.page,\n                    styleSheets: res.styleSheets,\n                    __N_SSG: res.mod.__N_SSG,\n                    __N_SSP: res.mod.__N_SSP\n                  };\n                });\n\n              case 11:\n                _context3.t0 = _context3.sent;\n\n              case 12:\n                routeInfo = _context3.t0;\n                Component1 = routeInfo.Component, __N_SSG = routeInfo.__N_SSG, __N_SSP = routeInfo.__N_SSP;\n\n                if (!true) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                _require = require('react-is'), isValidElementType = _require.isValidElementType;\n\n                if (isValidElementType(Component1)) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                throw new Error(\"The default export is not a React Component in page: \\\"\".concat(pathname, \"\\\"\"));\n\n              case 18:\n                if (__N_SSG || __N_SSP) {\n                  dataHref = this.pageLoader.getDataHref((0, _utils).formatWithValidation({\n                    pathname: pathname,\n                    query: query\n                  }), resolvedAs, __N_SSG, this.locale);\n                }\n\n                _context3.next = 21;\n                return this._getData(function () {\n                  return __N_SSG ? _this2._getStaticData(dataHref) : __N_SSP ? _this2._getServerData(dataHref) : _this2.getInitialProps(Component1, // we provide AppTree later so this needs to be `any`\n                  {\n                    pathname: pathname,\n                    query: query,\n                    asPath: as,\n                    locale: _this2.locale,\n                    locales: _this2.locales,\n                    defaultLocale: _this2.defaultLocale\n                  });\n                });\n\n              case 21:\n                props = _context3.sent;\n                routeInfo.props = props;\n                this.components[route] = routeInfo;\n                return _context3.abrupt(\"return\", routeInfo);\n\n              case 27:\n                _context3.prev = 27;\n                _context3.t1 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", this.handleRouteInfoError(_context3.t1, pathname, query, as, routeProps));\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 27]]);\n      }));\n\n      function getRouteInfo(_x12, _x13, _x14, _x15, _x16, _x17) {\n        return _getRouteInfo.apply(this, arguments);\n      }\n\n      return getRouteInfo;\n    }()\n  }, {\n    key: \"set\",\n    value: function set(route, pathname, query, as, data, resetScroll) {\n      this.isFallback = false;\n      this.route = route;\n      this.pathname = pathname;\n      this.query = query;\n      this.asPath = as;\n      return this.notify(data, resetScroll);\n    }\n    /**\n    * Callback to execute before replacing router state\n    * @param cb callback to be executed\n    */\n\n  }, {\n    key: \"beforePopState\",\n    value: function beforePopState(cb) {\n      this._bps = cb;\n    }\n  }, {\n    key: \"onlyAHashChange\",\n    value: function onlyAHashChange(as) {\n      if (!this.asPath) return false;\n\n      var _this$asPath$split = this.asPath.split('#'),\n          _this$asPath$split2 = _slicedToArray(_this$asPath$split, 2),\n          oldUrlNoHash = _this$asPath$split2[0],\n          oldHash = _this$asPath$split2[1];\n\n      var _as$split = as.split('#'),\n          _as$split2 = _slicedToArray(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same\n\n\n      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n        return true;\n      } // If the urls are change, there's more than a hash change\n\n\n      if (oldUrlNoHash !== newUrlNoHash) {\n        return false;\n      } // If the hash has changed, then it's a hash only change.\n      // This check is necessary to handle both the enter and\n      // leave hash === '' cases. The identity case falls through\n      // and is treated as a next reload.\n\n\n      return oldHash !== newHash;\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash(as) {\n      var _as$split3 = as.split('#'),\n          _as$split4 = _slicedToArray(_as$split3, 2),\n          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value or `#top`\n      // To mirror browsers\n\n\n      if (hash === '' || hash === 'top') {\n        window.scrollTo(0, 0);\n        return;\n      } // First we check if the element by id is found\n\n\n      var idEl = document.getElementById(hash);\n\n      if (idEl) {\n        idEl.scrollIntoView();\n        return;\n      } // If there's no element with the id, we check the `name` property\n      // To mirror browsers\n\n\n      var nameEl = document.getElementsByName(hash)[0];\n\n      if (nameEl) {\n        nameEl.scrollIntoView();\n      }\n    }\n  }, {\n    key: \"urlIsNew\",\n    value: function urlIsNew(asPath) {\n      return this.asPath !== asPath;\n    }\n    /**\n    * Prefetch page code, you may wait for the data during page rendering.\n    * This feature only works in production!\n    * @param url the href of prefetched page\n    * @param asPath the as path of the prefetched page\n    */\n\n  }, {\n    key: \"prefetch\",\n    value: function () {\n      var _prefetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(url) {\n        var _this3 = this;\n\n        var asPath,\n            options,\n            parsed,\n            pathname2,\n            parsedAs,\n            localePathResult,\n            pages,\n            resolvedAs,\n            rewrites,\n            _yield$getClientBuild2,\n            rewritesResult,\n            route,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                asPath = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : url;\n                options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n                parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n                pathname2 = parsed.pathname;\n\n                if (process.env.__NEXT_I18N_SUPPORT) {\n                  if (options.locale === false) {\n                    pathname2 = (0, _normalizeLocalePath).normalizeLocalePath(pathname2, this.locales).pathname;\n                    parsed.pathname = pathname2;\n                    url = (0, _utils).formatWithValidation(parsed);\n                    parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(asPath);\n                    localePathResult = (0, _normalizeLocalePath).normalizeLocalePath(parsedAs.pathname, this.locales);\n                    parsedAs.pathname = localePathResult.pathname;\n                    options.locale = localePathResult.detectedLocale || this.defaultLocale;\n                    asPath = (0, _utils).formatWithValidation(parsedAs);\n                  }\n                }\n\n                _context4.next = 7;\n                return this.pageLoader.getPageList();\n\n              case 7:\n                pages = _context4.sent;\n                resolvedAs = asPath;\n\n                if (!(process.env.__NEXT_HAS_REWRITES && asPath.startsWith('/'))) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                _context4.next = 12;\n                return (0, _routeLoader).getClientBuildManifest();\n\n              case 12:\n                _yield$getClientBuild2 = _context4.sent;\n                rewrites = _yield$getClientBuild2.__rewrites;\n                rewritesResult = (0, _resolveRewrites)[\"default\"](addBasePath(addLocale(asPath, this.locale)), pages, rewrites, parsed.query, function (p) {\n                  return resolveDynamicRoute(p, pages);\n                }, this.locales);\n                resolvedAs = delLocale(delBasePath(rewritesResult.asPath), this.locale);\n\n                if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n                  // if this directly matches a page we need to update the href to\n                  // allow the correct page chunk to be loaded\n                  pathname2 = rewritesResult.resolvedHref;\n                  parsed.pathname = pathname2;\n                  url = (0, _utils).formatWithValidation(parsed);\n                }\n\n                _context4.next = 21;\n                break;\n\n              case 19:\n                parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n                if (parsed.pathname !== pathname2) {\n                  pathname2 = parsed.pathname;\n                  parsed.pathname = pathname2;\n                  url = (0, _utils).formatWithValidation(parsed);\n                }\n\n              case 21:\n                route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname2); // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n                if (!true) {\n                  _context4.next = 24;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 24:\n                _context4.next = 26;\n                return Promise.all([this.pageLoader._isSsg(route).then(function (isSsg) {\n                  return isSsg ? _this3._getStaticData(_this3.pageLoader.getDataHref(url, resolvedAs, true, typeof options.locale !== 'undefined' ? options.locale : _this3.locale)) : false;\n                }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n\n              case 26:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function prefetch(_x18) {\n        return _prefetch.apply(this, arguments);\n      }\n\n      return prefetch;\n    }()\n  }, {\n    key: \"fetchComponent\",\n    value: function () {\n      var _fetchComponent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(route) {\n        var cancelled, cancel, componentResult, error;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                cancelled = false;\n\n                cancel = this.clc = function () {\n                  cancelled = true;\n                };\n\n                _context5.next = 4;\n                return this.pageLoader.loadPage(route);\n\n              case 4:\n                componentResult = _context5.sent;\n\n                if (!cancelled) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                error = new Error(\"Abort fetching component for route: \\\"\".concat(route, \"\\\"\"));\n                error.cancelled = true;\n                throw error;\n\n              case 9:\n                if (cancel === this.clc) {\n                  this.clc = null;\n                }\n\n                return _context5.abrupt(\"return\", componentResult);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function fetchComponent(_x19) {\n        return _fetchComponent.apply(this, arguments);\n      }\n\n      return fetchComponent;\n    }()\n  }, {\n    key: \"_getData\",\n    value: function _getData(fn) {\n      var _this4 = this;\n\n      var cancelled = false;\n\n      var cancel = function cancel() {\n        cancelled = true;\n      };\n\n      this.clc = cancel;\n      return fn().then(function (data) {\n        if (cancel === _this4.clc) {\n          _this4.clc = null;\n        }\n\n        if (cancelled) {\n          var err2 = new Error('Loading initial props cancelled');\n          err2.cancelled = true;\n          throw err2;\n        }\n\n        return data;\n      });\n    }\n  }, {\n    key: \"_getStaticData\",\n    value: function _getStaticData(dataHref) {\n      var _this5 = this;\n\n      var _URL = new URL(dataHref, window.location.href),\n          cacheKey = _URL.href;\n\n      if (false && !this.isPreview && this.sdc[cacheKey]) {\n        return Promise.resolve(this.sdc[cacheKey]);\n      }\n\n      return fetchNextData(dataHref, this.isSsr).then(function (data) {\n        _this5.sdc[cacheKey] = data;\n        return data;\n      });\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function _getServerData(dataHref) {\n      var _this6 = this;\n\n      var _URL2 = new URL(dataHref, window.location.href),\n          resourceKey = _URL2.href;\n\n      if (this.sdr[resourceKey]) {\n        return this.sdr[resourceKey];\n      }\n\n      return this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr).then(function (data) {\n        delete _this6.sdr[resourceKey];\n        return data;\n      })[\"catch\"](function (err2) {\n        delete _this6.sdr[resourceKey];\n        throw err2;\n      });\n    }\n  }, {\n    key: \"getInitialProps\",\n    value: function getInitialProps(Component, ctx) {\n      var App1 = this.components['/_app'].Component;\n\n      var AppTree = this._wrapApp(App1);\n\n      ctx.AppTree = AppTree;\n      return (0, _utils).loadGetInitialProps(App1, {\n        AppTree: AppTree,\n        Component: Component,\n        router: this,\n        ctx: ctx\n      });\n    }\n  }, {\n    key: \"abortComponentLoad\",\n    value: function abortComponentLoad(as, routeProps) {\n      if (this.clc) {\n        Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n        this.clc();\n        this.clc = null;\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(data, resetScroll) {\n      return this.sub(data, this.components['/_app'].Component, resetScroll);\n    }\n  }]);\n\n  return Router;\n}();\n\nRouter.events = (0, _mitt)[\"default\"]();\nexports[\"default\"] = Router;","map":{"version":3,"sources":["../../../../shared/lib/router/router.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:no-console\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { UrlObject } from 'url'\nimport {\n  normalizePathTrailingSlash,\n  removePathTrailingSlash,\n} from '../../../client/normalize-trailing-slash'\nimport { GoodPageCache, StyleSheetTuple } from '../../../client/page-loader'\nimport {\n  getClientBuildManifest,\n  isAssetError,\n  markAssetError,\n} from '../../../client/route-loader'\nimport { RouterEvent } from '../../../client/router'\nimport type { DomainLocale } from '../../../server/config'\nimport { denormalizePagePath } from '../../../server/denormalize-page-path'\nimport { normalizeLocalePath } from '../i18n/normalize-locale-path'\nimport mitt, { MittEmitter } from '../mitt'\nimport {\n  AppContextType,\n  formatWithValidation,\n  getLocationOrigin,\n  getURL,\n  loadGetInitialProps,\n  normalizeRepeatedSlashes,\n  NextPageContext,\n  ST,\n  NEXT_DATA,\n} from '../utils'\nimport { isDynamicRoute } from './utils/is-dynamic'\nimport { parseRelativeUrl } from './utils/parse-relative-url'\nimport { searchParamsToUrlQuery } from './utils/querystring'\nimport resolveRewrites from './utils/resolve-rewrites'\nimport { getRouteMatcher } from './utils/route-matcher'\nimport { getRouteRegex } from './utils/route-regex'\n\ndeclare global {\n  interface Window {\n    /* prod */\n    __NEXT_DATA__: NEXT_DATA\n  }\n}\n\ninterface RouteProperties {\n  shallow: boolean\n}\n\ninterface TransitionOptions {\n  shallow?: boolean\n  locale?: string | false\n  scroll?: boolean\n}\n\ninterface NextHistoryState {\n  url: string\n  as: string\n  options: TransitionOptions\n}\n\ntype HistoryState =\n  | null\n  | { __N: false }\n  | ({ __N: true; idx: number } & NextHistoryState)\n\nlet detectDomainLocale: typeof import('../i18n/detect-domain-locale').detectDomainLocale\n\nif (process.env.__NEXT_I18N_SUPPORT) {\n  detectDomainLocale =\n    require('../i18n/detect-domain-locale').detectDomainLocale\n}\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true,\n  })\n}\n\nfunction addPathPrefix(path: string, prefix?: string) {\n  return prefix && path.startsWith('/')\n    ? path === '/'\n      ? normalizePathTrailingSlash(prefix)\n      : `${prefix}${pathNoQueryHash(path) === '/' ? path.substring(1) : path}`\n    : path\n}\n\nexport function getDomainLocale(\n  path: string,\n  locale?: string | false,\n  locales?: string[],\n  domainLocales?: DomainLocale[]\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    locale = locale || normalizeLocalePath(path, locales).detectedLocale\n\n    const detectedDomain = detectDomainLocale(domainLocales, undefined, locale)\n\n    if (detectedDomain) {\n      return `http${detectedDomain.http ? '' : 's'}://${detectedDomain.domain}${\n        basePath || ''\n      }${locale === detectedDomain.defaultLocale ? '' : `/${locale}`}${path}`\n    }\n    return false\n  } else {\n    return false\n  }\n}\n\nexport function addLocale(\n  path: string,\n  locale?: string | false,\n  defaultLocale?: string\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const pathname = pathNoQueryHash(path)\n    const pathLower = pathname.toLowerCase()\n    const localeLower = locale && locale.toLowerCase()\n\n    return locale &&\n      locale !== defaultLocale &&\n      !pathLower.startsWith('/' + localeLower + '/') &&\n      pathLower !== '/' + localeLower\n      ? addPathPrefix(path, '/' + locale)\n      : path\n  }\n  return path\n}\n\nexport function delLocale(path: string, locale?: string) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const pathname = pathNoQueryHash(path)\n    const pathLower = pathname.toLowerCase()\n    const localeLower = locale && locale.toLowerCase()\n\n    return locale &&\n      (pathLower.startsWith('/' + localeLower + '/') ||\n        pathLower === '/' + localeLower)\n      ? (pathname.length === locale.length + 1 ? '/' : '') +\n          path.substr(locale.length + 1)\n      : path\n  }\n  return path\n}\n\nfunction pathNoQueryHash(path: string) {\n  const queryIndex = path.indexOf('?')\n  const hashIndex = path.indexOf('#')\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex)\n  }\n  return path\n}\n\nexport function hasBasePath(path: string): boolean {\n  path = pathNoQueryHash(path)\n  return path === basePath || path.startsWith(basePath + '/')\n}\n\nexport function addBasePath(path: string): string {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath)\n}\n\nexport function delBasePath(path: string): string {\n  path = path.slice(basePath.length)\n  if (!path.startsWith('/')) path = `/${path}`\n  return path\n}\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?'))\n    return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n\ntype Url = UrlObject | string\n\nexport function interpolateAs(\n  route: string,\n  asPathname: string,\n  query: ParsedUrlQuery\n) {\n  let interpolatedRoute = ''\n\n  const dynamicRegex = getRouteRegex(route)\n  const dynamicGroups = dynamicRegex.groups\n  const dynamicMatches =\n    // Try to match the dynamic route against the asPath\n    (asPathname !== route ? getRouteMatcher(dynamicRegex)(asPathname) : '') ||\n    // Fall back to reading the values from the href\n    // TODO: should this take priority; also need to change in the router.\n    query\n\n  interpolatedRoute = route\n  const params = Object.keys(dynamicGroups)\n\n  if (\n    !params.every((param) => {\n      let value = dynamicMatches[param] || ''\n      const { repeat, optional } = dynamicGroups[param]\n\n      // support single-level catch-all\n      // TODO: more robust handling for user-error (passing `/`)\n      let replaced = `[${repeat ? '...' : ''}${param}]`\n      if (optional) {\n        replaced = `${!value ? '/' : ''}[${replaced}]`\n      }\n      if (repeat && !Array.isArray(value)) value = [value]\n\n      return (\n        (optional || param in dynamicMatches) &&\n        // Interpolate group into data URL if present\n        (interpolatedRoute =\n          interpolatedRoute!.replace(\n            replaced,\n            repeat\n              ? (value as string[])\n                  .map(\n                    // these values should be fully encoded instead of just\n                    // path delimiter escaped since they are being inserted\n                    // into the URL and we expect URL encoded segments\n                    // when parsing dynamic route params\n                    (segment) => encodeURIComponent(segment)\n                  )\n                  .join('/')\n              : encodeURIComponent(value as string)\n          ) || '/')\n      )\n    })\n  ) {\n    interpolatedRoute = '' // did not satisfy all requirements\n\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n  return {\n    params,\n    result: interpolatedRoute,\n  }\n}\n\nfunction omitParmsFromQuery(query: ParsedUrlQuery, params: string[]) {\n  const filteredQuery: ParsedUrlQuery = {}\n\n  Object.keys(query).forEach((key) => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key]\n    }\n  })\n  return filteredQuery\n}\n\n/**\n * Resolves a given hyperlink with a certain router state (basePath not included).\n * Preserves absolute urls.\n */\nexport function resolveHref(\n  router: NextRouter,\n  href: Url,\n  resolveAs?: boolean\n): string {\n  // we use a dummy base url for relative urls\n  let base: URL\n  let urlAsString = typeof href === 'string' ? href : formatWithValidation(href)\n\n  // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n  const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//)\n  const urlAsStringNoProto = urlProtoMatch\n    ? urlAsString.substr(urlProtoMatch[0].length)\n    : urlAsString\n\n  const urlParts = urlAsStringNoProto.split('?')\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(\n      `Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`\n    )\n    const normalizedUrl = normalizeRepeatedSlashes(urlAsStringNoProto)\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl\n  }\n\n  // Return because it cannot be routed by the Next.js router\n  if (!isLocalURL(urlAsString)) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n\n  try {\n    base = new URL(\n      urlAsString.startsWith('#') ? router.asPath : router.pathname,\n      'http://n'\n    )\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n')\n  }\n  try {\n    const finalUrl = new URL(urlAsString, base)\n    finalUrl.pathname = normalizePathTrailingSlash(finalUrl.pathname)\n    let interpolatedAs = ''\n\n    if (\n      isDynamicRoute(finalUrl.pathname) &&\n      finalUrl.searchParams &&\n      resolveAs\n    ) {\n      const query = searchParamsToUrlQuery(finalUrl.searchParams)\n\n      const { result, params } = interpolateAs(\n        finalUrl.pathname,\n        finalUrl.pathname,\n        query\n      )\n\n      if (result) {\n        interpolatedAs = formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params),\n        })\n      }\n    }\n\n    // if the origin didn't change, it means we received a relative href\n    const resolvedHref =\n      finalUrl.origin === base.origin\n        ? finalUrl.href.slice(finalUrl.origin.length)\n        : finalUrl.href\n\n    return (\n      resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref\n    ) as string\n  } catch (_) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n}\n\nfunction stripOrigin(url: string) {\n  const origin = getLocationOrigin()\n\n  return url.startsWith(origin) ? url.substring(origin.length) : url\n}\n\nfunction prepareUrlAs(router: NextRouter, url: Url, as?: Url) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router, url, true)\n  const origin = getLocationOrigin()\n  const hrefHadOrigin = resolvedHref.startsWith(origin)\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin)\n\n  resolvedHref = stripOrigin(resolvedHref)\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs\n\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref)\n  const preparedAs = as\n    ? stripOrigin(resolveHref(router, as))\n    : resolvedAs || resolvedHref\n\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs),\n  }\n}\n\nfunction resolveDynamicRoute(pathname: string, pages: string[]) {\n  const cleanPathname = removePathTrailingSlash(denormalizePagePath(pathname!))\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname\n  }\n\n  // handle resolving href for dynamic routes\n  if (!pages.includes(cleanPathname!)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some((page) => {\n      if (isDynamicRoute(page) && getRouteRegex(page).re.test(cleanPathname!)) {\n        pathname = page\n        return true\n      }\n    })\n  }\n  return removePathTrailingSlash(pathname)\n}\n\nexport type BaseRouter = {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n  domainLocales?: DomainLocale[]\n  isLocaleDomain: boolean\n}\n\nexport type NextRouter = BaseRouter &\n  Pick<\n    Router,\n    | 'push'\n    | 'replace'\n    | 'reload'\n    | 'back'\n    | 'prefetch'\n    | 'beforePopState'\n    | 'events'\n    | 'isFallback'\n    | 'isReady'\n    | 'isPreview'\n  >\n\nexport type PrefetchOptions = {\n  priority?: boolean\n  locale?: string | false\n}\n\nexport type PrivateRouteInfo =\n  | (Omit<CompletePrivateRouteInfo, 'styleSheets'> & { initial: true })\n  | CompletePrivateRouteInfo\n\nexport type CompletePrivateRouteInfo = {\n  Component: ComponentType\n  styleSheets: StyleSheetTuple[]\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n  props?: Record<string, any>\n  err?: Error\n  error?: any\n}\n\nexport type AppProps = Pick<CompletePrivateRouteInfo, 'Component' | 'err'> & {\n  router: Router\n} & Record<string, any>\nexport type AppComponent = ComponentType<AppProps>\n\ntype Subscription = (\n  data: PrivateRouteInfo,\n  App: AppComponent,\n  resetScroll: { x: number; y: number } | null\n) => Promise<void>\n\ntype BeforePopStateCallback = (state: NextHistoryState) => boolean\n\ntype ComponentLoadCancel = (() => void) | null\n\ntype HistoryMethod = 'replaceState' | 'pushState'\n\nconst manualScrollRestoration =\n  process.env.__NEXT_SCROLL_RESTORATION &&\n  typeof window !== 'undefined' &&\n  'scrollRestoration' in window.history &&\n  !!(function () {\n    try {\n      let v = '__next'\n      // eslint-disable-next-line no-sequences\n      return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true\n    } catch (n) {}\n  })()\n\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND')\n\nfunction fetchRetry(url: string, attempts: number): Promise<any> {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin',\n  }).then((res) => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1)\n      }\n      if (res.status === 404) {\n        return res.json().then((data) => {\n          if (data.notFound) {\n            return { notFound: SSG_DATA_NOT_FOUND }\n          }\n          throw new Error(`Failed to load static props`)\n        })\n      }\n      throw new Error(`Failed to load static props`)\n    }\n    return res.json()\n  })\n}\n\nfunction fetchNextData(dataHref: string, isServerRender: boolean) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch((err: Error) => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n\n    if (!isServerRender) {\n      markAssetError(err)\n    }\n    throw err\n  })\n}\n\nexport default class Router implements BaseRouter {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n\n  /**\n   * Map of all components loaded in `Router`\n   */\n  components: { [pathname: string]: PrivateRouteInfo }\n  // Static Data Cache\n  sdc: { [asPath: string]: object } = {}\n  // In-flight Server Data Requests, for deduping\n  sdr: { [asPath: string]: Promise<object> } = {}\n\n  sub: Subscription\n  clc: ComponentLoadCancel\n  pageLoader: any\n  _bps: BeforePopStateCallback | undefined\n  events: MittEmitter<RouterEvent>\n  _wrapApp: (App: AppComponent) => any\n  isSsr: boolean\n  isFallback: boolean\n  _inFlightRoute?: string\n  _shallow?: boolean\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n  domainLocales?: DomainLocale[]\n  isReady: boolean\n  isPreview: boolean\n  isLocaleDomain: boolean\n\n  private _idx: number = 0\n\n  static events: MittEmitter<RouterEvent> = mitt()\n\n  constructor(\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      err,\n      subscription,\n      isFallback,\n      locale,\n      locales,\n      defaultLocale,\n      domainLocales,\n      isPreview,\n    }: {\n      subscription: Subscription\n      initialProps: any\n      pageLoader: any\n      Component: ComponentType\n      App: AppComponent\n      wrapApp: (WrapAppComponent: AppComponent) => any\n      err?: Error\n      isFallback: boolean\n      locale?: string\n      locales?: string[]\n      defaultLocale?: string\n      domainLocales?: DomainLocale[]\n      isPreview?: boolean\n    }\n  ) {\n    // represents the current component key\n    this.route = removePathTrailingSlash(pathname)\n\n    // set up the component cache (by route keys)\n    this.components = {}\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n      }\n    }\n\n    this.components['/_app'] = {\n      Component: App as ComponentType,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ],\n    }\n\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events\n\n    this.pageLoader = pageLoader\n    this.pathname = pathname\n    this.query = query\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    const autoExportDynamic =\n      isDynamicRoute(pathname) && self.__NEXT_DATA__.autoExport\n\n    this.asPath = autoExportDynamic ? pathname : as\n    this.basePath = basePath\n    this.sub = subscription\n    this.clc = null\n    this._wrapApp = wrapApp\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true\n\n    this.isFallback = isFallback\n\n    this.isReady = !!(\n      self.__NEXT_DATA__.gssp ||\n      self.__NEXT_DATA__.gip ||\n      (self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp) ||\n      (!autoExportDynamic &&\n        !self.location.search &&\n        !process.env.__NEXT_HAS_REWRITES)\n    )\n    this.isPreview = !!isPreview\n    this.isLocaleDomain = false\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale\n      this.locales = locales\n      this.defaultLocale = defaultLocale\n      this.domainLocales = domainLocales\n      this.isLocaleDomain = !!detectDomainLocale(\n        domainLocales,\n        self.location.hostname\n      )\n    }\n\n    if (typeof window !== 'undefined') {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        const options: TransitionOptions = { locale }\n        ;(options as any)._shouldResolveHref = as !== pathname\n\n        this.changeState(\n          'replaceState',\n          formatWithValidation({ pathname: addBasePath(pathname), query }),\n          getURL(),\n          options\n        )\n      }\n\n      window.addEventListener('popstate', this.onPopState)\n\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual'\n        }\n      }\n    }\n  }\n\n  onPopState = (e: PopStateEvent): void => {\n    const state = e.state as HistoryState\n\n    if (!state) {\n      // We get state as undefined for two reasons.\n      //  1. With older safari (< 8) and older chrome (< 34)\n      //  2. When the URL changed with #\n      //\n      // In the both cases, we don't need to proceed and change the route.\n      // (as it's already changed)\n      // But we can simply replace the state with the new changes.\n      // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n      // So, doing the following for (1) does no harm.\n      const { pathname, query } = this\n      this.changeState(\n        'replaceState',\n        formatWithValidation({ pathname: addBasePath(pathname), query }),\n        getURL()\n      )\n      return\n    }\n\n    if (!state.__N) {\n      return\n    }\n\n    let forcedScroll: { x: number; y: number } | undefined\n    const { url, as, options, idx } = state\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      if (manualScrollRestoration) {\n        if (this._idx !== idx) {\n          // Snapshot current scroll position:\n          try {\n            sessionStorage.setItem(\n              '__next_scroll_' + this._idx,\n              JSON.stringify({ x: self.pageXOffset, y: self.pageYOffset })\n            )\n          } catch {}\n\n          // Restore old scroll position:\n          try {\n            const v = sessionStorage.getItem('__next_scroll_' + idx)\n            forcedScroll = JSON.parse(v!)\n          } catch {\n            forcedScroll = { x: 0, y: 0 }\n          }\n        }\n      }\n    }\n    this._idx = idx\n\n    const { pathname } = parseRelativeUrl(url)\n\n    // Make sure we don't re-render on initial load,\n    // can be caused by navigating back from an external site\n    if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n      return\n    }\n\n    // If the downstream application returns falsy, return.\n    // They will then be responsible for handling the event.\n    if (this._bps && !this._bps(state)) {\n      return\n    }\n\n    this.change(\n      'replaceState',\n      url,\n      as,\n      Object.assign<{}, TransitionOptions, TransitionOptions>({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale,\n      }),\n      forcedScroll\n    )\n  }\n\n  reload(): void {\n    window.location.reload()\n  }\n\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back()\n  }\n\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url: Url, as?: Url, options: TransitionOptions = {}) {\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      // TODO: remove in the future when we update history before route change\n      // is complete, as the popstate event should handle this capture.\n      if (manualScrollRestoration) {\n        try {\n          // Snapshot scroll position right before navigating to a new page:\n          sessionStorage.setItem(\n            '__next_scroll_' + this._idx,\n            JSON.stringify({ x: self.pageXOffset, y: self.pageYOffset })\n          )\n        } catch {}\n      }\n    }\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('pushState', url, as, options)\n  }\n\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url: Url, as?: Url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('replaceState', url, as, options)\n  }\n\n  private async change(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions,\n    forcedScroll?: { x: number; y: number }\n  ): Promise<boolean> {\n    if (!isLocalURL(url)) {\n      window.location.href = url\n      return false\n    }\n    const shouldResolveHref =\n      url === as || (options as any)._h || (options as any)._shouldResolveHref\n\n    // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n    if ((options as any)._h) {\n      this.isReady = true\n    }\n\n    const prevLocale = this.locale\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale =\n        options.locale === false\n          ? this.defaultLocale\n          : options.locale || this.locale\n\n      if (typeof options.locale === 'undefined') {\n        options.locale = this.locale\n      }\n\n      const parsedAs = parseRelativeUrl(hasBasePath(as) ? delBasePath(as) : as)\n      const localePathResult = normalizeLocalePath(\n        parsedAs.pathname,\n        this.locales\n      )\n\n      if (localePathResult.detectedLocale) {\n        this.locale = localePathResult.detectedLocale\n        parsedAs.pathname = addBasePath(parsedAs.pathname)\n        as = formatWithValidation(parsedAs)\n        url = addBasePath(\n          normalizeLocalePath(\n            hasBasePath(url) ? delBasePath(url) : url,\n            this.locales\n          ).pathname\n        )\n      }\n      let didNavigate = false\n\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if the locale isn't configured hard navigate to show 404 page\n        if (!this.locales?.includes(this.locale!)) {\n          parsedAs.pathname = addLocale(parsedAs.pathname, this.locale)\n          window.location.href = formatWithValidation(parsedAs)\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true\n        }\n      }\n\n      const detectedDomain = detectDomainLocale(\n        this.domainLocales,\n        undefined,\n        this.locale\n      )\n\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if we are navigating to a domain locale ensure we redirect to the\n        // correct domain\n        if (\n          !didNavigate &&\n          detectedDomain &&\n          this.isLocaleDomain &&\n          self.location.hostname !== detectedDomain.domain\n        ) {\n          const asNoBasePath = delBasePath(as)\n          window.location.href = `http${detectedDomain.http ? '' : 's'}://${\n            detectedDomain.domain\n          }${addBasePath(\n            `${\n              this.locale === detectedDomain.defaultLocale\n                ? ''\n                : `/${this.locale}`\n            }${asNoBasePath === '/' ? '' : asNoBasePath}` || '/'\n          )}`\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true\n        }\n      }\n\n      if (didNavigate) {\n        return new Promise(() => {})\n      }\n    }\n\n    if (!(options as any)._h) {\n      this.isSsr = false\n    }\n    // marking route changes as a navigation start entry\n    if (ST) {\n      performance.mark('routeChange')\n    }\n\n    const { shallow = false } = options\n    const routeProps = { shallow }\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps)\n    }\n\n    as = addBasePath(\n      addLocale(\n        hasBasePath(as) ? delBasePath(as) : as,\n        options.locale,\n        this.defaultLocale\n      )\n    )\n    const cleanedAs = delLocale(\n      hasBasePath(as) ? delBasePath(as) : as,\n      this.locale\n    )\n    this._inFlightRoute = as\n\n    let localeChange = prevLocale !== this.locale\n\n    // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (\n      !(options as any)._h &&\n      this.onlyAHashChange(cleanedAs) &&\n      !localeChange\n    ) {\n      this.asPath = cleanedAs\n      Router.events.emit('hashChangeStart', as, routeProps)\n      // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, options)\n      this.scrollToHash(cleanedAs)\n      this.notify(this.components[this.route], null)\n      Router.events.emit('hashChangeComplete', as, routeProps)\n      return true\n    }\n\n    let parsed = parseRelativeUrl(url)\n    let { pathname, query } = parsed\n\n    // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    let pages: any, rewrites: any\n    try {\n      pages = await this.pageLoader.getPageList()\n      ;({ __rewrites: rewrites } = await getClientBuildManifest())\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as\n      return false\n    }\n\n    // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState'\n    }\n\n    // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as\n\n    // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname\n      ? removePathTrailingSlash(delBasePath(pathname))\n      : pathname\n\n    if (shouldResolveHref && pathname !== '/_error') {\n      ;(options as any)._shouldResolveHref = true\n\n      if (process.env.__NEXT_HAS_REWRITES && as.startsWith('/')) {\n        const rewritesResult = resolveRewrites(\n          addBasePath(addLocale(cleanedAs, this.locale)),\n          pages,\n          rewrites,\n          query,\n          (p: string) => resolveDynamicRoute(p, pages),\n          this.locales\n        )\n        resolvedAs = rewritesResult.asPath\n\n        if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n          // if this directly matches a page we need to update the href to\n          // allow the correct page chunk to be loaded\n          pathname = rewritesResult.resolvedHref\n          parsed.pathname = addBasePath(pathname)\n          url = formatWithValidation(parsed)\n        }\n      } else {\n        parsed.pathname = resolveDynamicRoute(pathname, pages)\n\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname\n          parsed.pathname = addBasePath(pathname)\n          url = formatWithValidation(parsed)\n        }\n      }\n    }\n\n    const route = removePathTrailingSlash(pathname)\n\n    if (!isLocalURL(as)) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` +\n            `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`\n        )\n      }\n\n      window.location.href = as\n      return false\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale)\n\n    if (isDynamicRoute(route)) {\n      const parsedAs = parseRelativeUrl(resolvedAs)\n      const asPathname = parsedAs.pathname\n\n      const routeRegex = getRouteRegex(route)\n      const routeMatch = getRouteMatcher(routeRegex)(asPathname)\n      const shouldInterpolate = route === asPathname\n      const interpolatedAs = shouldInterpolate\n        ? interpolateAs(route, asPathname, query)\n        : ({} as { result: undefined; params: undefined })\n\n      if (!routeMatch || (shouldInterpolate && !interpolatedAs.result)) {\n        const missingParams = Object.keys(routeRegex.groups).filter(\n          (param) => !query[param]\n        )\n\n        if (missingParams.length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `${\n                shouldInterpolate\n                  ? `Interpolating href`\n                  : `Mismatching \\`as\\` and \\`href\\``\n              } failed to manually provide ` +\n                `the params: ${missingParams.join(\n                  ', '\n                )} in the \\`href\\`'s \\`query\\``\n            )\n          }\n\n          throw new Error(\n            (shouldInterpolate\n              ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(\n                  ', '\n                )}) to be interpolated properly. `\n              : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) +\n              `Read more: https://nextjs.org/docs/messages/${\n                shouldInterpolate\n                  ? 'href-interpolation-failed'\n                  : 'incompatible-href-as'\n              }`\n          )\n        }\n      } else if (shouldInterpolate) {\n        as = formatWithValidation(\n          Object.assign({}, parsedAs, {\n            pathname: interpolatedAs.result,\n            query: omitParmsFromQuery(query, interpolatedAs.params!),\n          })\n        )\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch)\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps)\n\n    try {\n      let routeInfo = await this.getRouteInfo(\n        route,\n        pathname,\n        query,\n        as,\n        resolvedAs,\n        routeProps\n      )\n      let { error, props, __N_SSG, __N_SSP } = routeInfo\n\n      // handle redirect on client-transition\n      if ((__N_SSG || __N_SSP) && props) {\n        if ((props as any).pageProps && (props as any).pageProps.__N_REDIRECT) {\n          const destination = (props as any).pageProps.__N_REDIRECT\n\n          // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n          if (destination.startsWith('/')) {\n            const parsedHref = parseRelativeUrl(destination)\n            parsedHref.pathname = resolveDynamicRoute(\n              parsedHref.pathname,\n              pages\n            )\n\n            const { url: newUrl, as: newAs } = prepareUrlAs(\n              this,\n              destination,\n              destination\n            )\n            return this.change(method, newUrl, newAs, options)\n          }\n\n          window.location.href = destination\n          return new Promise(() => {})\n        }\n\n        this.isPreview = !!props.__N_PREVIEW\n\n        // handle SSG data 404\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute\n\n          try {\n            await this.fetchComponent('/404')\n            notFoundRoute = '/404'\n          } catch (_) {\n            notFoundRoute = '/_error'\n          }\n\n          routeInfo = await this.getRouteInfo(\n            notFoundRoute,\n            notFoundRoute,\n            query,\n            as,\n            resolvedAs,\n            { shallow: false }\n          )\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps)\n      this.changeState(method, url, as, options)\n\n      if (process.env.NODE_ENV !== 'production') {\n        const appComp: any = this.components['/_app'].Component\n        ;(window as any).next.isPrerendered =\n          appComp.getInitialProps === appComp.origGetInitialProps &&\n          !(routeInfo.Component as any).getInitialProps\n      }\n\n      if (\n        (options as any)._h &&\n        pathname === '/_error' &&\n        self.__NEXT_DATA__.props?.pageProps?.statusCode === 500 &&\n        props?.pageProps\n      ) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500\n      }\n\n      // shallow routing is only allowed for same page URL changes.\n      const isValidShallowRoute = options.shallow && this.route === route\n\n      const shouldScroll = options.scroll ?? !isValidShallowRoute\n      const resetScroll = shouldScroll ? { x: 0, y: 0 } : null\n      await this.set(\n        route,\n        pathname!,\n        query,\n        cleanedAs,\n        routeInfo,\n        forcedScroll ?? resetScroll\n      ).catch((e) => {\n        if (e.cancelled) error = error || e\n        else throw e\n      })\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps)\n        throw error\n      }\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        if (this.locale) {\n          document.documentElement.lang = this.locale\n        }\n      }\n      Router.events.emit('routeChangeComplete', as, routeProps)\n\n      return true\n    } catch (err) {\n      if (err.cancelled) {\n        return false\n      }\n      throw err\n    }\n  }\n\n  changeState(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions = {}\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`)\n        return\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`)\n        return\n      }\n    }\n\n    if (method !== 'pushState' || getURL() !== as) {\n      this._shallow = options.shallow\n      window.history[method](\n        {\n          url,\n          as,\n          options,\n          __N: true,\n          idx: (this._idx = method !== 'pushState' ? this._idx : this._idx + 1),\n        } as HistoryState,\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '',\n        as\n      )\n    }\n  }\n\n  async handleRouteInfoError(\n    err: Error & { code: any; cancelled: boolean },\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    routeProps: RouteProperties,\n    loadErrorFail?: boolean\n  ): Promise<CompletePrivateRouteInfo> {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err\n    }\n\n    if (isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps)\n\n      // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as\n\n      // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError()\n    }\n\n    try {\n      let Component: ComponentType\n      let styleSheets: StyleSheetTuple[]\n      let props: Record<string, any> | undefined\n\n      if (\n        typeof Component! === 'undefined' ||\n        typeof styleSheets! === 'undefined'\n      ) {\n        ;({ page: Component, styleSheets } = await this.fetchComponent(\n          '/_error'\n        ))\n      }\n\n      const routeInfo: CompletePrivateRouteInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err,\n      }\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query,\n          } as any)\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr)\n          routeInfo.props = {}\n        }\n      }\n\n      return routeInfo\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(\n        routeInfoErr,\n        pathname,\n        query,\n        as,\n        routeProps,\n        true\n      )\n    }\n  }\n\n  async getRouteInfo(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    resolvedAs: string,\n    routeProps: RouteProperties\n  ): Promise<PrivateRouteInfo> {\n    try {\n      const existingRouteInfo: PrivateRouteInfo | undefined =\n        this.components[route]\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo\n      }\n\n      const cachedRouteInfo: CompletePrivateRouteInfo | undefined =\n        existingRouteInfo && 'initial' in existingRouteInfo\n          ? undefined\n          : existingRouteInfo\n      const routeInfo: CompletePrivateRouteInfo = cachedRouteInfo\n        ? cachedRouteInfo\n        : await this.fetchComponent(route).then((res) => ({\n            Component: res.page,\n            styleSheets: res.styleSheets,\n            __N_SSG: res.mod.__N_SSG,\n            __N_SSP: res.mod.__N_SSP,\n          }))\n\n      const { Component, __N_SSG, __N_SSP } = routeInfo\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { isValidElementType } = require('react-is')\n        if (!isValidElementType(Component)) {\n          throw new Error(\n            `The default export is not a React Component in page: \"${pathname}\"`\n          )\n        }\n      }\n\n      let dataHref: string | undefined\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref(\n          formatWithValidation({ pathname, query }),\n          resolvedAs,\n          __N_SSG,\n          this.locale\n        )\n      }\n\n      const props = await this._getData<CompletePrivateRouteInfo>(() =>\n        __N_SSG\n          ? this._getStaticData(dataHref!)\n          : __N_SSP\n          ? this._getServerData(dataHref!)\n          : this.getInitialProps(\n              Component,\n              // we provide AppTree later so this needs to be `any`\n              {\n                pathname,\n                query,\n                asPath: as,\n                locale: this.locale,\n                locales: this.locales,\n                defaultLocale: this.defaultLocale,\n              } as any\n            )\n      )\n\n      routeInfo.props = props\n      this.components[route] = routeInfo\n      return routeInfo\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as, routeProps)\n    }\n  }\n\n  set(\n    route: string,\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    data: PrivateRouteInfo,\n    resetScroll: { x: number; y: number } | null\n  ): Promise<void> {\n    this.isFallback = false\n\n    this.route = route\n    this.pathname = pathname\n    this.query = query\n    this.asPath = as\n    return this.notify(data, resetScroll)\n  }\n\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb: BeforePopStateCallback) {\n    this._bps = cb\n  }\n\n  onlyAHashChange(as: string): boolean {\n    if (!this.asPath) return false\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#')\n    const [newUrlNoHash, newHash] = as.split('#')\n\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true\n    }\n\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false\n    }\n\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash\n  }\n\n  scrollToHash(as: string): void {\n    const [, hash] = as.split('#')\n    // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0)\n      return\n    }\n\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash)\n    if (idEl) {\n      idEl.scrollIntoView()\n      return\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0]\n    if (nameEl) {\n      nameEl.scrollIntoView()\n    }\n  }\n\n  urlIsNew(asPath: string): boolean {\n    return this.asPath !== asPath\n  }\n\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  async prefetch(\n    url: string,\n    asPath: string = url,\n    options: PrefetchOptions = {}\n  ): Promise<void> {\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname } = parsed\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      if (options.locale === false) {\n        pathname = normalizeLocalePath!(pathname, this.locales).pathname\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n\n        let parsedAs = parseRelativeUrl(asPath)\n        const localePathResult = normalizeLocalePath!(\n          parsedAs.pathname,\n          this.locales\n        )\n        parsedAs.pathname = localePathResult.pathname\n        options.locale = localePathResult.detectedLocale || this.defaultLocale\n        asPath = formatWithValidation(parsedAs)\n      }\n    }\n\n    const pages = await this.pageLoader.getPageList()\n    let resolvedAs = asPath\n\n    if (process.env.__NEXT_HAS_REWRITES && asPath.startsWith('/')) {\n      let rewrites: any\n      ;({ __rewrites: rewrites } = await getClientBuildManifest())\n\n      const rewritesResult = resolveRewrites(\n        addBasePath(addLocale(asPath, this.locale)),\n        pages,\n        rewrites,\n        parsed.query,\n        (p: string) => resolveDynamicRoute(p, pages),\n        this.locales\n      )\n      resolvedAs = delLocale(delBasePath(rewritesResult.asPath), this.locale)\n\n      if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n        // if this directly matches a page we need to update the href to\n        // allow the correct page chunk to be loaded\n        pathname = rewritesResult.resolvedHref\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n      }\n    } else {\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages)\n\n      if (parsed.pathname !== pathname) {\n        pathname = parsed.pathname\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n      }\n    }\n    const route = removePathTrailingSlash(pathname)\n\n    // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (process.env.NODE_ENV !== 'production') {\n      return\n    }\n\n    await Promise.all([\n      this.pageLoader._isSsg(route).then((isSsg: boolean) => {\n        return isSsg\n          ? this._getStaticData(\n              this.pageLoader.getDataHref(\n                url,\n                resolvedAs,\n                true,\n                typeof options.locale !== 'undefined'\n                  ? options.locale\n                  : this.locale\n              )\n            )\n          : false\n      }),\n      this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n    ])\n  }\n\n  async fetchComponent(route: string): Promise<GoodPageCache> {\n    let cancelled = false\n    const cancel = (this.clc = () => {\n      cancelled = true\n    })\n\n    const componentResult = await this.pageLoader.loadPage(route)\n\n    if (cancelled) {\n      const error: any = new Error(\n        `Abort fetching component for route: \"${route}\"`\n      )\n      error.cancelled = true\n      throw error\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null\n    }\n\n    return componentResult\n  }\n\n  _getData<T>(fn: () => Promise<T>): Promise<T> {\n    let cancelled = false\n    const cancel = () => {\n      cancelled = true\n    }\n    this.clc = cancel\n    return fn().then((data) => {\n      if (cancel === this.clc) {\n        this.clc = null\n      }\n\n      if (cancelled) {\n        const err: any = new Error('Loading initial props cancelled')\n        err.cancelled = true\n        throw err\n      }\n\n      return data\n    })\n  }\n\n  _getStaticData(dataHref: string): Promise<object> {\n    const { href: cacheKey } = new URL(dataHref, window.location.href)\n    if (\n      process.env.NODE_ENV === 'production' &&\n      !this.isPreview &&\n      this.sdc[cacheKey]\n    ) {\n      return Promise.resolve(this.sdc[cacheKey])\n    }\n    return fetchNextData(dataHref, this.isSsr).then((data) => {\n      this.sdc[cacheKey] = data\n      return data\n    })\n  }\n\n  _getServerData(dataHref: string): Promise<object> {\n    const { href: resourceKey } = new URL(dataHref, window.location.href)\n    if (this.sdr[resourceKey]) {\n      return this.sdr[resourceKey]\n    }\n    return (this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr)\n      .then((data) => {\n        delete this.sdr[resourceKey]\n        return data\n      })\n      .catch((err) => {\n        delete this.sdr[resourceKey]\n        throw err\n      }))\n  }\n\n  getInitialProps(\n    Component: ComponentType,\n    ctx: NextPageContext\n  ): Promise<any> {\n    const { Component: App } = this.components['/_app']\n    const AppTree = this._wrapApp(App as AppComponent)\n    ctx.AppTree = AppTree\n    return loadGetInitialProps<AppContextType<Router>>(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx,\n    })\n  }\n\n  abortComponentLoad(as: string, routeProps: RouteProperties): void {\n    if (this.clc) {\n      Router.events.emit(\n        'routeChangeError',\n        buildCancellationError(),\n        as,\n        routeProps\n      )\n      this.clc()\n      this.clc = null\n    }\n  }\n\n  notify(\n    data: PrivateRouteInfo,\n    resetScroll: { x: number; y: number } | null\n  ): Promise<void> {\n    return this.sub(\n      data,\n      this.components['/_app'].Component as AppComponent,\n      resetScroll\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}