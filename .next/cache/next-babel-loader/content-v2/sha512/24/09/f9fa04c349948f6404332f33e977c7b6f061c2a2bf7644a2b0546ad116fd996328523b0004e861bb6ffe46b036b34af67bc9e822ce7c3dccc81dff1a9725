{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/gazifuad/Documents/GitHub/Rice-Datathon-Website/node_modules/next/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/gazifuad/Documents/GitHub/Rice-Datathon-Website/node_modules/next/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _router = require(\"../shared/lib/router/router\");\n\nvar _getAssetPathFromRoute = _interopRequireDefault(require(\"../shared/lib/router/utils/get-asset-path-from-route\"));\n\nvar _isDynamic = require(\"../shared/lib/router/utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"../shared/lib/router/utils/parse-relative-url\");\n\nvar _normalizeTrailingSlash = require(\"./normalize-trailing-slash\");\n\nvar _routeLoader = require(\"./route-loader\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction normalizeRoute(route) {\n  if (route[0] !== '/') {\n    throw new Error(\"Route name should start with a \\\"/\\\", got \\\"\".concat(route, \"\\\"\"));\n  }\n\n  if (route === '/') return route;\n  return route.replace(/\\/$/, '');\n}\n\nvar PageLoader = /*#__PURE__*/function () {\n  function PageLoader(buildId, assetPrefix) {\n    _classCallCheck(this, PageLoader);\n\n    this.routeLoader = (0, _routeLoader).createRouteLoader(assetPrefix);\n    this.buildId = buildId;\n    this.assetPrefix = assetPrefix;\n    /** @type {Promise<Set<string>>} */\n\n    this.promisedSsgManifest = new Promise(function (resolve) {\n      if (window.__SSG_MANIFEST) {\n        resolve(window.__SSG_MANIFEST);\n      } else {\n        window.__SSG_MANIFEST_CB = function () {\n          resolve(window.__SSG_MANIFEST);\n        };\n      }\n    });\n  }\n\n  _createClass(PageLoader, [{\n    key: \"getPageList\",\n    value: function getPageList() {\n      if (false) {\n        return (0, _routeLoader).getClientBuildManifest().then(function (manifest) {\n          return manifest.sortedPages;\n        });\n      } else {\n        if (window.__DEV_PAGES_MANIFEST) {\n          return window.__DEV_PAGES_MANIFEST.pages;\n        } else {\n          if (!this.promisedDevPagesManifest) {\n            this.promisedDevPagesManifest = fetch(\"\".concat(this.assetPrefix, \"/_next/static/development/_devPagesManifest.json\")).then(function (res) {\n              return res.json();\n            }).then(function (manifest) {\n              window.__DEV_PAGES_MANIFEST = manifest;\n              return manifest.pages;\n            })[\"catch\"](function (err) {\n              console.log(\"Failed to fetch devPagesManifest\", err);\n            });\n          }\n\n          return this.promisedDevPagesManifest;\n        }\n      }\n    }\n    /**\n    * @param {string} href the route href (file-system path)\n    * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n    * @returns {string}\n    */\n\n  }, {\n    key: \"getDataHref\",\n    value: function getDataHref(href, asPath, ssg, locale) {\n      var _this = this;\n\n      var _parseRelativeUrl2 = (0, _parseRelativeUrl).parseRelativeUrl(href),\n          hrefPathname = _parseRelativeUrl2.pathname,\n          query = _parseRelativeUrl2.query,\n          search = _parseRelativeUrl2.search;\n\n      var _parseRelativeUrl3 = (0, _parseRelativeUrl).parseRelativeUrl(asPath),\n          asPathname = _parseRelativeUrl3.pathname;\n\n      var route = normalizeRoute(hrefPathname);\n\n      var getHrefForSlug = function getHrefForSlug(path) {\n        var dataRoute = (0, _getAssetPathFromRoute)[\"default\"]((0, _normalizeTrailingSlash).removePathTrailingSlash((0, _router).addLocale(path, locale)), '.json');\n        return (0, _router).addBasePath(\"/_next/data/\".concat(_this.buildId).concat(dataRoute).concat(ssg ? '' : search));\n      };\n\n      var isDynamic = (0, _isDynamic).isDynamicRoute(route);\n      var interpolatedRoute = isDynamic ? (0, _router).interpolateAs(hrefPathname, asPathname, query).result : '';\n      return isDynamic ? interpolatedRoute && getHrefForSlug(interpolatedRoute) : getHrefForSlug(route);\n    }\n    /**\n    * @param {string} route - the route (file-system path)\n    */\n\n  }, {\n    key: \"_isSsg\",\n    value: function _isSsg(route) {\n      return this.promisedSsgManifest.then(function (s) {\n        return s.has(route);\n      });\n    }\n  }, {\n    key: \"loadPage\",\n    value: function loadPage(route) {\n      return this.routeLoader.loadRoute(route).then(function (res) {\n        if ('component' in res) {\n          return {\n            page: res.component,\n            mod: res.exports,\n            styleSheets: res.styles.map(function (o) {\n              return {\n                href: o.href,\n                text: o.content\n              };\n            })\n          };\n        }\n\n        throw res.error;\n      });\n    }\n  }, {\n    key: \"prefetch\",\n    value: function prefetch(route) {\n      return this.routeLoader.prefetch(route);\n    }\n  }]);\n\n  return PageLoader;\n}();\n\nexports[\"default\"] = PageLoader;","map":{"version":3,"sources":["../../client/page-loader.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentType } from 'react'\nimport { ClientSsgManifest } from '../build'\nimport {\n  addBasePath,\n  addLocale,\n  interpolateAs,\n} from '../shared/lib/router/router'\nimport getAssetPathFromRoute from '../shared/lib/router/utils/get-asset-path-from-route'\nimport { isDynamicRoute } from '../shared/lib/router/utils/is-dynamic'\nimport { parseRelativeUrl } from '../shared/lib/router/utils/parse-relative-url'\nimport { removePathTrailingSlash } from './normalize-trailing-slash'\nimport {\n  createRouteLoader,\n  getClientBuildManifest,\n  RouteLoader,\n} from './route-loader'\n\nfunction normalizeRoute(route: string): string {\n  if (route[0] !== '/') {\n    throw new Error(`Route name should start with a \"/\", got \"${route}\"`)\n  }\n\n  if (route === '/') return route\n  return route.replace(/\\/$/, '')\n}\n\nexport type StyleSheetTuple = { href: string; text: string }\nexport type GoodPageCache = {\n  page: ComponentType\n  mod: any\n  styleSheets: StyleSheetTuple[]\n}\n\nexport default class PageLoader {\n  private buildId: string\n  private assetPrefix: string\n\n  private promisedSsgManifest?: Promise<ClientSsgManifest>\n  private promisedDevPagesManifest?: Promise<any>\n  public routeLoader: RouteLoader\n\n  constructor(buildId: string, assetPrefix: string) {\n    this.routeLoader = createRouteLoader(assetPrefix)\n\n    this.buildId = buildId\n    this.assetPrefix = assetPrefix\n\n    /** @type {Promise<Set<string>>} */\n    this.promisedSsgManifest = new Promise((resolve) => {\n      if ((window as any).__SSG_MANIFEST) {\n        resolve((window as any).__SSG_MANIFEST)\n      } else {\n        ;(window as any).__SSG_MANIFEST_CB = () => {\n          resolve((window as any).__SSG_MANIFEST)\n        }\n      }\n    })\n  }\n\n  getPageList() {\n    if (process.env.NODE_ENV === 'production') {\n      return getClientBuildManifest().then((manifest) => manifest.sortedPages)\n    } else {\n      if ((window as any).__DEV_PAGES_MANIFEST) {\n        return (window as any).__DEV_PAGES_MANIFEST.pages\n      } else {\n        if (!this.promisedDevPagesManifest) {\n          this.promisedDevPagesManifest = fetch(\n            `${this.assetPrefix}/_next/static/development/_devPagesManifest.json`\n          )\n            .then((res) => res.json())\n            .then((manifest) => {\n              ;(window as any).__DEV_PAGES_MANIFEST = manifest\n              return manifest.pages\n            })\n            .catch((err) => {\n              console.log(`Failed to fetch devPagesManifest`, err)\n            })\n        }\n        return this.promisedDevPagesManifest\n      }\n    }\n  }\n\n  /**\n   * @param {string} href the route href (file-system path)\n   * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n   * @returns {string}\n   */\n  getDataHref(\n    href: string,\n    asPath: string,\n    ssg: boolean,\n    locale?: string | false\n  ): string {\n    const { pathname: hrefPathname, query, search } = parseRelativeUrl(href)\n    const { pathname: asPathname } = parseRelativeUrl(asPath)\n    const route = normalizeRoute(hrefPathname)\n\n    const getHrefForSlug = (path: string) => {\n      const dataRoute = getAssetPathFromRoute(\n        removePathTrailingSlash(addLocale(path, locale)),\n        '.json'\n      )\n      return addBasePath(\n        `/_next/data/${this.buildId}${dataRoute}${ssg ? '' : search}`\n      )\n    }\n\n    const isDynamic: boolean = isDynamicRoute(route)\n    const interpolatedRoute = isDynamic\n      ? interpolateAs(hrefPathname, asPathname, query).result\n      : ''\n\n    return isDynamic\n      ? interpolatedRoute && getHrefForSlug(interpolatedRoute)\n      : getHrefForSlug(route)\n  }\n\n  /**\n   * @param {string} route - the route (file-system path)\n   */\n  _isSsg(route: string): Promise<boolean> {\n    return this.promisedSsgManifest!.then((s: ClientSsgManifest) =>\n      s.has(route)\n    )\n  }\n\n  loadPage(route: string): Promise<GoodPageCache> {\n    return this.routeLoader.loadRoute(route).then((res) => {\n      if ('component' in res) {\n        return {\n          page: res.component,\n          mod: res.exports,\n          styleSheets: res.styles.map((o) => ({\n            href: o.href,\n            text: o.content,\n          })),\n        }\n      }\n      throw res.error\n    })\n  }\n\n  prefetch(route: string): Promise<void> {\n    return this.routeLoader.prefetch(route)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}