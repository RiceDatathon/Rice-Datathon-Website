{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/gazifuad/Documents/Documents - Gazi's MacBook Pro/GitHub/Rice-Datathon-Website/node_modules/next/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/gazifuad/Documents/Documents - Gazi's MacBook Pro/GitHub/Rice-Datathon-Website/node_modules/next/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _router = require(\"../shared/lib/router/router\");\n\nvar _getAssetPathFromRoute = _interopRequireDefault(require(\"../shared/lib/router/utils/get-asset-path-from-route\"));\n\nvar _isDynamic = require(\"../shared/lib/router/utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"../shared/lib/router/utils/parse-relative-url\");\n\nvar _normalizeTrailingSlash = require(\"./normalize-trailing-slash\");\n\nvar _routeLoader = require(\"./route-loader\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction normalizeRoute(route) {\n  if (route[0] !== '/') {\n    throw new Error(\"Route name should start with a \\\"/\\\", got \\\"\".concat(route, \"\\\"\"));\n  }\n\n  if (route === '/') return route;\n  return route.replace(/\\/$/, '');\n}\n\nvar PageLoader = /*#__PURE__*/function () {\n  function PageLoader(buildId, assetPrefix) {\n    _classCallCheck(this, PageLoader);\n\n    this.routeLoader = (0, _routeLoader).createRouteLoader(assetPrefix);\n    this.buildId = buildId;\n    this.assetPrefix = assetPrefix;\n    /** @type {Promise<Set<string>>} */\n\n    this.promisedSsgManifest = new Promise(function (resolve) {\n      if (window.__SSG_MANIFEST) {\n        resolve(window.__SSG_MANIFEST);\n      } else {\n        window.__SSG_MANIFEST_CB = function () {\n          resolve(window.__SSG_MANIFEST);\n        };\n      }\n    });\n  }\n\n  _createClass(PageLoader, [{\n    key: \"getPageList\",\n    value: function getPageList() {\n      if (true) {\n        return (0, _routeLoader).getClientBuildManifest().then(function (manifest) {\n          return manifest.sortedPages;\n        });\n      } else {\n        if (window.__DEV_PAGES_MANIFEST) {\n          return window.__DEV_PAGES_MANIFEST.pages;\n        } else {\n          if (!this.promisedDevPagesManifest) {\n            this.promisedDevPagesManifest = fetch(\"\".concat(this.assetPrefix, \"/_next/static/development/_devPagesManifest.json\")).then(function (res) {\n              return res.json();\n            }).then(function (manifest) {\n              window.__DEV_PAGES_MANIFEST = manifest;\n              return manifest.pages;\n            })[\"catch\"](function (err) {\n              console.log(\"Failed to fetch devPagesManifest\", err);\n            });\n          }\n\n          return this.promisedDevPagesManifest;\n        }\n      }\n    }\n    /**\n    * @param {string} href the route href (file-system path)\n    * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n    * @returns {string}\n    */\n\n  }, {\n    key: \"getDataHref\",\n    value: function getDataHref(href, asPath, ssg, locale) {\n      var _this = this;\n\n      var _parseRelativeUrl2 = (0, _parseRelativeUrl).parseRelativeUrl(href),\n          hrefPathname = _parseRelativeUrl2.pathname,\n          query = _parseRelativeUrl2.query,\n          search = _parseRelativeUrl2.search;\n\n      var _parseRelativeUrl3 = (0, _parseRelativeUrl).parseRelativeUrl(asPath),\n          asPathname = _parseRelativeUrl3.pathname;\n\n      var route = normalizeRoute(hrefPathname);\n\n      var getHrefForSlug = function getHrefForSlug(path) {\n        var dataRoute = (0, _getAssetPathFromRoute)[\"default\"]((0, _normalizeTrailingSlash).removePathTrailingSlash((0, _router).addLocale(path, locale)), '.json');\n        return (0, _router).addBasePath(\"/_next/data/\".concat(_this.buildId).concat(dataRoute).concat(ssg ? '' : search));\n      };\n\n      var isDynamic = (0, _isDynamic).isDynamicRoute(route);\n      var interpolatedRoute = isDynamic ? (0, _router).interpolateAs(hrefPathname, asPathname, query).result : '';\n      return isDynamic ? interpolatedRoute && getHrefForSlug(interpolatedRoute) : getHrefForSlug(route);\n    }\n    /**\n    * @param {string} route - the route (file-system path)\n    */\n\n  }, {\n    key: \"_isSsg\",\n    value: function _isSsg(route) {\n      return this.promisedSsgManifest.then(function (s) {\n        return s.has(route);\n      });\n    }\n  }, {\n    key: \"loadPage\",\n    value: function loadPage(route) {\n      return this.routeLoader.loadRoute(route).then(function (res) {\n        if ('component' in res) {\n          return {\n            page: res.component,\n            mod: res.exports,\n            styleSheets: res.styles.map(function (o) {\n              return {\n                href: o.href,\n                text: o.content\n              };\n            })\n          };\n        }\n\n        throw res.error;\n      });\n    }\n  }, {\n    key: \"prefetch\",\n    value: function prefetch(route) {\n      return this.routeLoader.prefetch(route);\n    }\n  }]);\n\n  return PageLoader;\n}();\n\nexports[\"default\"] = PageLoader;","map":null,"metadata":{},"sourceType":"script"}