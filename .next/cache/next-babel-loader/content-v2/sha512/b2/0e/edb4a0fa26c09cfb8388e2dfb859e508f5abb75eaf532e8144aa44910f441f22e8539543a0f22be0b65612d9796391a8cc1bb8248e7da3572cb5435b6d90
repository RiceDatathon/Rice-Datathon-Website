{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatUrl = formatUrl;\n\nvar querystring = _interopRequireWildcard(require(\"./querystring\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nvar slashedProtocols = /https?|ftp|gopher|file/;\n\nfunction formatUrl(urlObj) {\n  var auth = urlObj.auth,\n      hostname = urlObj.hostname;\n  var protocol = urlObj.protocol || '';\n  var pathname = urlObj.pathname || '';\n  var hash = urlObj.hash || '';\n  var query = urlObj.query || '';\n  var host = false;\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';\n\n  if (urlObj.host) {\n    host = auth + urlObj.host;\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? \"[\".concat(hostname, \"]\") : hostname);\n\n    if (urlObj.port) {\n      host += ':' + urlObj.port;\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    query = String(querystring.urlQueryToSearchParams(query));\n  }\n\n  var search = urlObj.search || query && \"?\".concat(query) || '';\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash;\n  if (search && search[0] !== '?') search = '?' + search;\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent);\n  search = search.replace('#', '%23');\n  return \"\".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/format-url.ts"],"names":[],"mappings":";;;;;QA4BgB,S,GAAA,S;;AAJJ,IAAA,WAAW,GAAA,uBAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEZ,IAAM,gBAAgB,GAAA,wBAAtB;;SAEgB,S,CAAU,M,EAAmB;AAC3C,MAAM,IAAN,GAAyB,MAAzB,CAAM,IAAN;AAAA,MAAY,QAAZ,GAAyB,MAAzB,CAAY,QAAZ;AACA,MAAI,QAAQ,GAAG,MAAM,CAAC,QAAP,IAAe,EAA9B;AACA,MAAI,QAAQ,GAAG,MAAM,CAAC,QAAP,IAAe,EAA9B;AACA,MAAI,IAAI,GAAG,MAAM,CAAC,IAAP,IAAW,EAAtB;AACA,MAAI,KAAK,GAAG,MAAM,CAAC,KAAP,IAAY,EAAxB;AACA,MAAI,IAAI,GAAmB,KAA3B;AAEA,EAAA,IAAI,GAAG,IAAI,GAAG,kBAAkB,CAAC,IAAD,CAAlB,CAAyB,OAAzB,CAAgC,MAAhC,EAAgC,GAAhC,IAA4C,GAA/C,GAAsD,EAAjE;;AAEA,MAAI,MAAM,CAAC,IAAX,EAAiB;AACf,IAAA,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC,IAArB;AACD,GAFD,MAEO,IAAI,QAAJ,EAAc;AACnB,IAAA,IAAI,GAAG,IAAI,IAAA,CAAK,QAAQ,CAAC,OAAT,CAAgB,GAAhB,CAAL,cAAiC,QAAjC,SAA+C,QAA/C,CAAX;;AACA,QAAI,MAAM,CAAC,IAAX,EAAiB;AACf,MAAA,IAAI,IAAA,MAAU,MAAM,CAAC,IAArB;AACD;AACF;;AAED,MAAI,KAAK,IAAA,OAAW,KAAX,KAAgB,QAAzB,EAAwC;AACtC,IAAA,KAAK,GAAG,MAAM,CAxBN,WAAW,CAwBQ,sBAxBnB,CAwB0C,KAxB1C,CAwBM,CAAd;AACD;;AAED,MAAI,MAAM,GAAG,MAAM,CAAC,MAAP,IAAkB,KAAK,eAAQ,KAAR,CAAvB,IAAoC,EAAjD;AAEA,MAAI,QAAQ,IAAI,QAAQ,CAAC,MAAT,CAAe,CAAE,CAAjB,MAAkB,GAAlC,EAA6C,QAAQ,IAAA,GAAR;;AAE7C,MACE,MAAM,CAAC,OAAP,IAAc,CAAA,CACX,QADW,IACC,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB,CADD,KACqC,IAAI,KAAK,KAF9D,EAGE;AACA,IAAA,IAAI,GAAA,QAAW,IAAI,IAAA,EAAf,CAAJ;AACA,QAAI,QAAQ,IAAI,QAAQ,CAAC,CAAD,CAAR,KAAU,GAA1B,EAAqC,QAAQ,GAAA,MAAS,QAAjB;AACtC,GAND,MAMO,IAAE,CAAG,IAAL,EAAW;AAChB,IAAA,IAAI,GAAA,EAAJ;AACD;;AAED,MAAI,IAAI,IAAI,IAAI,CAAC,CAAD,CAAJ,KAAM,GAAlB,EAA6B,IAAI,GAAA,MAAS,IAAb;AAC7B,MAAI,MAAM,IAAI,MAAM,CAAC,CAAD,CAAN,KAAQ,GAAtB,EAAiC,MAAM,GAAA,MAAS,MAAf;AAEjC,EAAA,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAgB,OAAhB,EAA0B,kBAA1B,CAAX;AACA,EAAA,MAAM,GAAG,MAAM,CAAC,OAAP,CAAc,GAAd,EAAkB,KAAlB,CAAT;mBAEU,Q,SAAW,I,SAAO,Q,SAAW,M,SAAS,I;AACjD","sourcesContent":["// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport { UrlObject } from 'url'\nimport { ParsedUrlQuery } from 'querystring'\nimport * as querystring from './querystring'\n\nconst slashedProtocols = /https?|ftp|gopher|file/\n\nexport function formatUrl(urlObj: UrlObject) {\n  let { auth, hostname } = urlObj\n  let protocol = urlObj.protocol || ''\n  let pathname = urlObj.pathname || ''\n  let hash = urlObj.hash || ''\n  let query = urlObj.query || ''\n  let host: string | false = false\n\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : ''\n\n  if (urlObj.host) {\n    host = auth + urlObj.host\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname)\n    if (urlObj.port) {\n      host += ':' + urlObj.port\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    query = String(querystring.urlQueryToSearchParams(query as ParsedUrlQuery))\n  }\n\n  let search = urlObj.search || (query && `?${query}`) || ''\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':'\n\n  if (\n    urlObj.slashes ||\n    ((!protocol || slashedProtocols.test(protocol)) && host !== false)\n  ) {\n    host = '//' + (host || '')\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname\n  } else if (!host) {\n    host = ''\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash\n  if (search && search[0] !== '?') search = '?' + search\n\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent)\n  search = search.replace('#', '%23')\n\n  return `${protocol}${host}${pathname}${search}${hash}`\n}\n"]},"metadata":{},"sourceType":"script"}