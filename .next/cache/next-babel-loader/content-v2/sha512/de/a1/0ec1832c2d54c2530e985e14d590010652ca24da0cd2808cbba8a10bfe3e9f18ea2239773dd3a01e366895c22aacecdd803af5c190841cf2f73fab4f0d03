{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addMessageListener = addMessageListener;\nexports.getEventSourceWrapper = getEventSourceWrapper;\nvar eventCallbacks = [];\n\nfunction EventSourceWrapper(options) {\n  var source;\n  var lastActivity = new Date();\n  var listeners = [];\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000;\n  }\n\n  init();\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect();\n    }\n  }, options.timeout / 2);\n\n  function init() {\n    source = new window.EventSource(options.path);\n    source.onopen = handleOnline;\n    source.onerror = handleDisconnect;\n    source.onmessage = handleMessage;\n  }\n\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected');\n    lastActivity = new Date();\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date();\n\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event);\n    }\n\n    eventCallbacks.forEach(function (cb) {\n      if (!cb.unfiltered && event.data.indexOf('action') === -1) return;\n      cb(event);\n    });\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer);\n    source.close();\n    setTimeout(init, options.timeout);\n  }\n\n  return {\n    close: function close() {\n      clearInterval(timer);\n      source.close();\n    },\n    addMessageListener: function addMessageListener(fn) {\n      listeners.push(fn);\n    }\n  };\n}\n\n_c = EventSourceWrapper;\n\nfunction addMessageListener(cb) {\n  eventCallbacks.push(cb);\n}\n\nfunction getEventSourceWrapper(options) {\n  return EventSourceWrapper(options);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"EventSourceWrapper\");","map":{"version":3,"sources":["../../../../client/dev/error-overlay/eventsource.js"],"names":[],"mappings":";;;;;QA2DgB,kB,GAAA,kB;QAIA,qB,GAAA,qB;AA/DhB,IAAM,cAAc,GAAA,EAApB;;SAES,kB,CAAmB,O,EAAS;AACnC,MAAI,MAAJ;AACA,MAAI,YAAY,GAAG,IAAI,IAAJ,EAAnB;AACA,MAAI,SAAS,GAAA,EAAb;;AAEA,MAAE,CAAG,OAAO,CAAC,OAAb,EAAsB;AACpB,IAAA,OAAO,CAAC,OAAR,GAAkB,KAAK,IAAvB;AACD;;AAED,EAAA,IAAI;AACJ,MAAI,KAAK,GAAG,WAAW,CAAA,YAAa;AAClC,QAAI,IAAI,IAAJ,KAAa,YAAb,GAA4B,OAAO,CAAC,OAAxC,EAAiD;AAC/C,MAAA,gBAAgB;AACjB;AACF,GAJsB,EAIpB,OAAO,CAAC,OAAR,GAAkB,CAJE,CAAvB;;WAMS,I,GAAO;AACd,IAAA,MAAM,GAAG,IAAI,MAAM,CAAC,WAAX,CAAuB,OAAO,CAAC,IAA/B,CAAT;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,YAAhB;AACA,IAAA,MAAM,CAAC,OAAP,GAAiB,gBAAjB;AACA,IAAA,MAAM,CAAC,SAAP,GAAmB,aAAnB;AACD;;WAEQ,Y,GAAe;AACtB,QAAI,OAAO,CAAC,GAAZ,EAAiB,OAAO,CAAC,GAAR,CAAW,iBAAX;AACjB,IAAA,YAAY,GAAG,IAAI,IAAJ,EAAf;AACD;;WAEQ,a,CAAc,K,EAAO;AAC5B,IAAA,YAAY,GAAG,IAAI,IAAJ,EAAf;;SACK,IAAI,CAAC,GAAG,C,EAAG,CAAC,GAAG,SAAS,CAAC,M,EAAQ,CAAC,E,EAAI;AACzC,MAAA,SAAS,CAAC,CAAD,CAAT,CAAa,KAAb;AACD;;AAED,IAAA,cAAc,CAAC,OAAf,CAAsB,UAAE,EAAF,EAAS;AAC7B,UAAE,CAAG,EAAE,CAAC,UAAN,IAAoB,KAAK,CAAC,IAAN,CAAW,OAAX,CAAkB,QAAlB,MAA2B,CAAO,CAAxD,EAAyD;AACzD,MAAA,EAAE,CAAC,KAAD,CAAF;AACD,KAHD;AAID;;WAEQ,gB,GAAmB;AAC1B,IAAA,aAAa,CAAC,KAAD,CAAb;AACA,IAAA,MAAM,CAAC,KAAP;AACA,IAAA,UAAU,CAAC,IAAD,EAAO,OAAO,CAAC,OAAf,CAAV;AACD;;;AAGC,IAAA,KAAK,EAAA,iBAAQ;AACX,MAAA,aAAa,CAAC,KAAD,CAAb;AACA,MAAA,MAAM,CAAC,KAAP;AACD,K;AACD,IAAA,kBAAkB,EAAA,4BAAY,EAAZ,EAAgB;AAChC,MAAA,SAAS,CAAC,IAAV,CAAe,EAAf;AACD;;AAEJ;;KAvDQ,kB;;SAyDO,kB,CAAmB,E,EAAI;AACrC,EAAA,cAAc,CAAC,IAAf,CAAoB,EAApB;AACD;;SAEe,qB,CAAsB,O,EAAS;SACtC,kBAAkB,CAAC,OAAD,C;AAC1B","sourcesContent":["const eventCallbacks = []\n\nfunction EventSourceWrapper(options) {\n  var source\n  var lastActivity = new Date()\n  var listeners = []\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000\n  }\n\n  init()\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect()\n    }\n  }, options.timeout / 2)\n\n  function init() {\n    source = new window.EventSource(options.path)\n    source.onopen = handleOnline\n    source.onerror = handleDisconnect\n    source.onmessage = handleMessage\n  }\n\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected')\n    lastActivity = new Date()\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date()\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event)\n    }\n\n    eventCallbacks.forEach((cb) => {\n      if (!cb.unfiltered && event.data.indexOf('action') === -1) return\n      cb(event)\n    })\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer)\n    source.close()\n    setTimeout(init, options.timeout)\n  }\n\n  return {\n    close: () => {\n      clearInterval(timer)\n      source.close()\n    },\n    addMessageListener: function (fn) {\n      listeners.push(fn)\n    },\n  }\n}\n\nexport function addMessageListener(cb) {\n  eventCallbacks.push(cb)\n}\n\nexport function getEventSourceWrapper(options) {\n  return EventSourceWrapper(options)\n}\n"]},"metadata":{},"sourceType":"script"}